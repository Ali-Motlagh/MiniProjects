{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Real or Fake News Predictor using Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> <b> Purpose</b>: Develop a model to accurately predict Fake News from Real News text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> <b> Data</b>: Online news article data with title and article text as features, and a Fake | Real target label\n",
    "https://assets.datacamp.com/production/repositories/932/datasets/cd04303b8b2904d1025809dfb29076de696a1ffc/News%20articles.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> <b> Naive Bayes</b>: This is an algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports and reading data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aoanQKZVPM_A",
    "outputId": "bf072f34-a9c8-4152-f890-fb35a990c3c0",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Unnamed: 0                                              title  \\\n",
      "0        8476                       You Can Smell Hillary’s Fear   \n",
      "1       10294  Watch The Exact Moment Paul Ryan Committed Pol...   \n",
      "2        3608        Kerry to go to Paris in gesture of sympathy   \n",
      "3       10142  Bernie supporters on Twitter erupt in anger ag...   \n",
      "4         875   The Battle of New York: Why This Primary Matters   \n",
      "\n",
      "                                                text label  \n",
      "0  Daniel Greenfield, a Shillman Journalism Fello...  FAKE  \n",
      "1  Google Pinterest Digg Linkedin Reddit Stumbleu...  FAKE  \n",
      "2  U.S. Secretary of State John F. Kerry said Mon...  REAL  \n",
      "3  — Kaydee King (@KaydeeKing) November 9, 2016 T...  FAKE  \n",
      "4  It's primary day in New York and front-runners...  REAL  \n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.corpus import wordnet\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from wordcloud import WordCloud,STOPWORDS\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.tokenize import word_tokenize,sent_tokenize\n",
    "\n",
    "\n",
    "import re,string,unicodedata\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn import metrics\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "df = pd.read_csv('fake_or_real_news.csv')\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                               title  \\\n",
      "0                       You Can Smell Hillary’s Fear   \n",
      "1  Watch The Exact Moment Paul Ryan Committed Pol...   \n",
      "2        Kerry to go to Paris in gesture of sympathy   \n",
      "3  Bernie supporters on Twitter erupt in anger ag...   \n",
      "4   The Battle of New York: Why This Primary Matters   \n",
      "\n",
      "                                                text label  \n",
      "0  Daniel Greenfield, a Shillman Journalism Fello...  FAKE  \n",
      "1  Google Pinterest Digg Linkedin Reddit Stumbleu...  FAKE  \n",
      "2  U.S. Secretary of State John F. Kerry said Mon...  REAL  \n",
      "3  — Kaydee King (@KaydeeKing) November 9, 2016 T...  FAKE  \n",
      "4  It's primary day in New York and front-runners...  REAL  \n"
     ]
    }
   ],
   "source": [
    "# Drop unnecessary column imported [common CSV bug]\n",
    "df =df.drop(['Unnamed: 0'], axis=1)\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA and Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "title    0\n",
       "text     0\n",
       "label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check NULL values in data\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check proportion of fake : real news\n",
    "plt.figure(figsize=(16,9))\n",
    "\n",
    "sns.countplot(df.label)\n",
    "plt.title('Total Fake and Real News Articles', fontsize=24)\n",
    "plt.ylabel('Total', fontsize=16)\n",
    "plt.xlabel('')\n",
    "plt.xticks([0, 1], ['Fake', 'Real'], fontsize=16)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data is not lopsided, real vs fake is split nearly 50/50. GREAT!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "ename": "LookupError",
     "evalue": "\n**********************************************************************\n  Resource \u001b[93mstopwords\u001b[0m not found.\n  Please use the NLTK Downloader to obtain the resource:\n\n  \u001b[31m>>> import nltk\n  >>> nltk.download('stopwords')\n  \u001b[0m\n  For more information see: https://www.nltk.org/data.html\n\n  Attempted to load \u001b[93mcorpora/stopwords\u001b[0m\n\n  Searched in:\n    - '/Users/alimotlagh/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/share/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/lib/nltk_data'\n    - '/usr/share/nltk_data'\n    - '/usr/local/share/nltk_data'\n    - '/usr/lib/nltk_data'\n    - '/usr/local/lib/nltk_data'\n**********************************************************************\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mLookupError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/nltk/corpus/util.py\u001b[0m in \u001b[0;36m__load\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     82\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m                     \u001b[0mroot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{}/{}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubdir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzip_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mLookupError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/nltk/data.py\u001b[0m in \u001b[0;36mfind\u001b[0;34m(resource_name, paths)\u001b[0m\n\u001b[1;32m    582\u001b[0m     \u001b[0mresource_not_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\\n%s\\n%s\\n%s\\n\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 583\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mLookupError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresource_not_found\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    584\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mLookupError\u001b[0m: \n**********************************************************************\n  Resource \u001b[93mstopwords\u001b[0m not found.\n  Please use the NLTK Downloader to obtain the resource:\n\n  \u001b[31m>>> import nltk\n  >>> nltk.download('stopwords')\n  \u001b[0m\n  For more information see: https://www.nltk.org/data.html\n\n  Attempted to load \u001b[93mcorpora/stopwords.zip/stopwords/\u001b[0m\n\n  Searched in:\n    - '/Users/alimotlagh/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/share/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/lib/nltk_data'\n    - '/usr/share/nltk_data'\n    - '/usr/local/share/nltk_data'\n    - '/usr/lib/nltk_data'\n    - '/usr/local/lib/nltk_data'\n**********************************************************************\n",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mLookupError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-181-697a2d92ce62>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mwnl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlemmatize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mwords\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstopwords\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mcorpus\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Real'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mlistToString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-181-697a2d92ce62>\u001b[0m in \u001b[0;36mclean\u001b[0;34m(text)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mwnl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWordNetLemmatizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mstopwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorpus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstopwords\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwords\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'english'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     text = (text.encode('ascii', 'ignore')\n\u001b[1;32m      8\u001b[0m              \u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ignore'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/nltk/corpus/util.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attr)\u001b[0m\n\u001b[1;32m    118\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"LazyCorpusLoader object has no attribute '__bases__'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m         \u001b[0;31m# This looks circular, but its not, since __load() changes our\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;31m# __class__ to something new:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/nltk/corpus/util.py\u001b[0m in \u001b[0;36m__load\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     83\u001b[0m                     \u001b[0mroot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{}/{}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubdir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzip_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mLookupError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m         \u001b[0;31m# Load the corpus.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/nltk/corpus/util.py\u001b[0m in \u001b[0;36m__load\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m                 \u001b[0mroot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{}/{}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubdir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mLookupError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/nltk/data.py\u001b[0m in \u001b[0;36mfind\u001b[0;34m(resource_name, paths)\u001b[0m\n\u001b[1;32m    581\u001b[0m     \u001b[0msep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"*\"\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m70\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    582\u001b[0m     \u001b[0mresource_not_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\\n%s\\n%s\\n%s\\n\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 583\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mLookupError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresource_not_found\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    584\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mLookupError\u001b[0m: \n**********************************************************************\n  Resource \u001b[93mstopwords\u001b[0m not found.\n  Please use the NLTK Downloader to obtain the resource:\n\n  \u001b[31m>>> import nltk\n  >>> nltk.download('stopwords')\n  \u001b[0m\n  For more information see: https://www.nltk.org/data.html\n\n  Attempted to load \u001b[93mcorpora/stopwords\u001b[0m\n\n  Searched in:\n    - '/Users/alimotlagh/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/share/nltk_data'\n    - '/Users/alimotlagh/opt/anaconda3/lib/nltk_data'\n    - '/usr/share/nltk_data'\n    - '/usr/local/share/nltk_data'\n    - '/usr/lib/nltk_data'\n    - '/usr/local/lib/nltk_data'\n**********************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1440x1440 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (20,20))\n",
    "def clean(text: str) -> list:\n",
    "    'A simple function to cleanup text data'\n",
    "    \n",
    "    wnl = nltk.stem.WordNetLemmatizer()\n",
    "    stopwords = nltk.corpus.stopwords.words('english')\n",
    "    text = (text.encode('ascii', 'ignore')\n",
    "             .decode('utf-8', 'ignore')\n",
    "             .lower())\n",
    "    words = re.sub(r'[^\\w\\s]', '', text).split() # tokenization\n",
    "    return [wnl.lemmatize(word) for word in words if word not in stopwords]\n",
    "\n",
    "corpus = clean(' '.join(df[df.label == 'Real'].text))\n",
    "\n",
    "def listToString(s):  \n",
    "    \n",
    "    # initialize an empty string \n",
    "    str1 = \" \" \n",
    "    \n",
    "    # return string   \n",
    "    return (str1.join(s)) \n",
    "\n",
    "corpus_str = listToString(corpus)\n",
    "\n",
    "d = path.dirname(__file__) if \"__file__\" in locals() else os.getcwd()\n",
    "\n",
    "# read the mask / color image taken from\n",
    "coloring = np.array(Image.open(path.join(d, \"real_news.jpg\")))\n",
    "stopwords = set(STOPWORDS)\n",
    "\n",
    "wc = WordCloud(background_color=\"white\", max_words = 2000 , width = 1600 , height = 800, mask=coloring,\n",
    "               stopwords=stopwords, max_font_size=80, random_state=42)\n",
    "\n",
    "# generate word cloud\n",
    "wc.generate(corpus_str)\n",
    "\n",
    "# create coloring from image\n",
    "image_colors = ImageColorGenerator(coloring)\n",
    "\n",
    "plt.imshow(wc, interpolation='bilinear')\n",
    "plt.axis(\"off\")\n",
    "\n",
    "# # This bit of code is used to create a high quality exported image\n",
    "# fig1 = plt.gcf()\n",
    "# plt.show()\n",
    "# plt.draw()\n",
    "# fig1.savefig(\"real_news_nlp_word_cloud.png\", bbox_inches='tight', dpi=600)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split data in to training & testing sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "24tp0-fSPT_y",
    "outputId": "12bdcbbb-1c9b-4097-b31a-872b0d1efbbf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sample of words from our data: ['trues', 'truest', 'truism', 'trukachev', 'trukhacheva', 'truly', 'truman', 'trumka', 'trump', 'trump2016']\n"
     ]
    }
   ],
   "source": [
    "# Create a series to store the labels [FAKE or TRUE news]: y\n",
    "y = df.label\n",
    "\n",
    "# Create training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(df['text'],y,test_size =0.3, random_state =5)\n",
    "\n",
    "# Initialize a CountVectorizer object: count_vectorizer\n",
    "count_vectorizer = CountVectorizer(stop_words='english')\n",
    "\n",
    "# Transform the training data using only the 'text' column values: count_train \n",
    "count_train = count_vectorizer.fit_transform(X_train.values)\n",
    "\n",
    "# Transform the test data using only the 'text' column values: count_test \n",
    "count_test = count_vectorizer.transform(X_test.values)\n",
    "\n",
    "# Sample of words extracted from text data: 'feature names'\n",
    "print('sample of words from our data:',count_vectorizer.get_feature_names()[:-1][52401:52411])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TF-IDF Vectorizer for text classification\n",
    "Term Frequency - Inverse Document Frequency: <p> Lowers value of common but meaningless words in text like:\n",
    "<i>'and', 'the'<i>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 240
    },
    "id": "_1r0RakVOYYq",
    "outputId": "92c8d27a-f3f6-49b5-84a1-30386bd23528"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "# Initialize a TfidfVectorizer object: tfidf_vectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)\n",
    "\n",
    "# Transform the training data: tfidf_train \n",
    "tfidf_train = tfidf_vectorizer.fit_transform(X_train, y_train)\n",
    "\n",
    "# Transform the test data: tfidf_test \n",
    "tfidf_test = tfidf_vectorizer.transform(X_test)\n",
    "\n",
    "# Print the first 5 vectors of the tfidf training data\n",
    "print(tfidf_train.A[:-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alpha testing\n",
    "By measure of accuracy score on TF-IDF test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hhrmVil6PTCU",
    "outputId": "5b193add-3a54-4294-9914-ab47f43dd24f",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha:  0.0\n",
      "Score:  0.8853235139400316\n",
      "\n",
      "Alpha:  0.1\n",
      "Score:  0.9053129931614939\n",
      "\n",
      "Alpha:  0.2\n",
      "Score:  0.8926880589163598\n",
      "\n",
      "Alpha:  0.30000000000000004\n",
      "Score:  0.8837453971593898\n",
      "\n",
      "Alpha:  0.4\n",
      "Score:  0.8774329300368228\n",
      "\n",
      "Alpha:  0.5\n",
      "Score:  0.8679642293529721\n",
      "\n",
      "Alpha:  0.6000000000000001\n",
      "Score:  0.8611257233035244\n",
      "\n",
      "Alpha:  0.7000000000000001\n",
      "Score:  0.8532351394003156\n",
      "\n",
      "Alpha:  0.8\n",
      "Score:  0.8437664387164651\n",
      "\n",
      "Alpha:  0.9\n",
      "Score:  0.8395581273014203\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn import metrics\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "# Create the list of alphas: alphas\n",
    "alphas = np.arange(0,1,.10)\n",
    "scores ={}\n",
    "# Define train_and_predict()\n",
    "def train_and_predict(alpha):\n",
    "    # Instantiate the classifier: nb_classifier\n",
    "    nb_classifier = MultinomialNB(alpha=alpha)\n",
    "    # Fit to the training data\n",
    "    nb_classifier.fit(tfidf_train, y_train)\n",
    "    # Predict the labels: pred\n",
    "    pred = nb_classifier.predict(tfidf_test)\n",
    "    # Compute accuracy: score\n",
    "    score = metrics.accuracy_score(y_test,pred)\n",
    "    scores[alpha] = score\n",
    "    return score\n",
    "\n",
    "# Iterate over the alphas and print the corresponding score\n",
    "for alpha in alphas:\n",
    "    print('Alpha: ', alpha)\n",
    "    print('Score: ', train_and_predict(alpha))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting alpha test results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "\n",
    "# Initialize the matplotlib figure\n",
    "f, ax = plt.subplots(figsize=(8, 4))\n",
    "\n",
    "# Plot the scores for each alpha\n",
    "sns.lineplot(data=scores, color=\"g\")\n",
    "\n",
    "# Add a legend and informative axis label\n",
    "ax.set(xlim=(0, 1), ylabel=\"Accuracy score\",\n",
    "       xlabel=\"Alpha value\")\n",
    "sns.despine(left=True, bottom=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alpha of <u>0.1</u> returns the highest accuracy score!\n",
    "\n",
    "<p>\n",
    "\n",
    "We will use 0.1 in our Naive Bayes modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9058390320883746\n",
      "Confusion Matrix:\n",
      " [[826 109]\n",
      " [ 70 896]]\n"
     ]
    }
   ],
   "source": [
    "# Initialize Naive Bayes classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "\n",
    "# Fitting the classifier to the training data\n",
    "nb_classifier.fit(count_train, y_train)\n",
    "pred = nb_classifier.predict(count_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(f'Accuracy: {score}')\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels= ['FAKE', 'REAL'])\n",
    "print('Confusion Matrix:\\n',cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "W3twQ3bsR_BQ",
    "outputId": "b7b58d95-a94a-44e6-e507-f605ce909729"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9053129931614939\n",
      "Confusion Matrix:\n",
      " [[808 127]\n",
      " [ 53 913]]\n"
     ]
    }
   ],
   "source": [
    "# Create a Multinomial Naive Bayes classifier: nb_classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "nb_classifier.fit(tfidf_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = nb_classifier.predict(tfidf_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(f'Accuracy: {score}')\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels= ['FAKE','REAL'])\n",
    "print('Confusion Matrix:\\n', cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(data, labels, output_filename=0):\n",
    "    \"\"\"Plot confusion matrix using heatmap.\n",
    " \n",
    "    Args:\n",
    "        data (list of list): List of lists with confusion matrix data.\n",
    "        labels (list): Labels which will be plotted across x and y axis.\n",
    "        output_filename (str): Path to output file.\n",
    " \n",
    "    \"\"\"\n",
    "    sns.set(color_codes=True)\n",
    "    plt.figure(1, figsize=(12, 8))\n",
    " \n",
    "    plt.title(\"Confusion Matrix\")\n",
    " \n",
    "    sns.set(font_scale=1.4)\n",
    "    ax = sns.heatmap(data, annot=True, cmap=\"YlGnBu\", cbar_kws={'label': 'Scale'})\n",
    " \n",
    "    ax.set_xticklabels(labels)\n",
    "    ax.set_yticklabels(labels)\n",
    " \n",
    "    ax.set(ylabel=\"True Label\", xlabel=\"Predicted Label\")\n",
    " \n",
    "    #plt.savefig(output_filename, bbox_inches='tight', dpi=300)\n",
    "    plt.show()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.heatmap(cm/np.sum(cm), annot=True, \n",
    "            fmt='.2%', cmap='Blues')\n",
    "\n",
    "ax.set_title('Seaborn Confusion Matrix with labels\\n\\n');\n",
    "ax.set_xlabel('\\nPredicted Values')\n",
    "ax.set_ylabel('Actual Values ');\n",
    "\n",
    "## Ticket labels - List must be in alphabetical order\n",
    "ax.xaxis.set_ticklabels(['False','True'])\n",
    "ax.yaxis.set_ticklabels(['False','True'])\n",
    "\n",
    "## Display the visualization of the Confusion Matrix.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABBsAAAQQCAYAAACjhVMHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAABxfElEQVR4nOzdfbzX8/0/8MfndCE5QtOFy6KQq2FFttU0vvjOGGUzs1K05WIJX75mGG2Lbcw337BNq+S7kcI0ZuZ6zCZWZljlYraEnFhIOnVU5/dHv86cFXV4n87ncL/fbp/b+rzeV6+3920uHp/n6/ku1dbW1gYAAACgIBVNPQEAAADgw0XYAAAAABRK2AAAAAAUStgAAAAAFErYAAAAABRK2AAAAAAUStgAQNlYvnx5rr766gwYMCCHH354DjnkkFxyySWpqan5QOc86aSTcvDBB+cXv/hFg49/4oknMmLEiPd9/X+3//77Z88998xbb71Vb/yXv/xldtppp/z2t799z+PffPPNHHvsse+6/fDDD8/ChQsLmSsAwPvVsqknAACrjBw5Mm+88UauueaabLzxxlm8eHHOPPPMnHvuubnkkkve1zmrqqry4IMP5rHHHkuLFi0afPzuu++eMWPGvK9rv5vNNtssd911V4444oi6salTp2bzzTdf67FvvPFGnnjiiXfd/qtf/aqIKQIAfCAqGwAoCy+88EJuvfXWXHTRRdl4442TJG3bts13vvOd/Md//EeSlb/qn3nmmTn00ENz2GGH5eKLL86yZcuSrAwFLr/88hx99NHZf//9c91112XRokX52te+lmXLlmXAgAF5/vnns9NOO2XBggV11131/a233sqIESNy+OGHp3///jnvvPOyYsWKPPzwwzn00EPf1/XfzRe+8IXccsstdd9ffPHFLF68ONtvv33d2I033pgvfelLOeKII/LZz3627nzf+ta3smTJkhx++OFZvnx5dtttt5x66qk5+OCD88QTT9TdzxVXXJGjjz46y5cvzyuvvJI+ffpk2rRpRTwqAIC1EjYAUBb++te/pnv37qmsrKw33qFDhxx88MFJklGjRmXTTTfNrbfemptuuilPPfVUJkyYkCSpqanJZpttluuvvz5jxozJ97///bRq1Spjx45NmzZt8qtf/Srbbrvtu17/rrvuyltvvZVf/epXufHGG5Mkc+fOrbdPQ6+/dOnSNV5rv/32y+zZszN//vwkK6sR3lnl8NZbb+WGG27I2LFjM3Xq1IwePbqusuP73/9+3f20aNEib7/9dj772c/mjjvuyO677153jpNOOiktW7bM+PHjc9ZZZ2XgwIHZd9991/ocAACKIGwAoCxUVFRkxYoV77nPAw88kIEDB6ZUKqV169Y5+uij88ADD9RtP+CAA5Iku+66a2pqarJ48eJ1vn7Pnj3z7LPPZtCgQRk7dmwGDx6cLl26NMr1W7VqlYMPPji//vWvkyS33357XfVEkmy00Ub56U9/mvvvvz+XXXZZfvrTn77nvfTq1Wu1sRYtWuRHP/pRfvazn6W2tjYnnHDCOv+1AAD4oIQNAJSFj3/843nuueeyaNGieuNVVVUZNmxYlixZkhUrVqRUKtVtW7FiRd0yhiTZYIMNkqRun9ra2ve85jsbT26zzTa56667MmzYsCxatCjHHXdc7r333nr7F3n9I444IrfcckseffTRbLfddtl0003rtr388ss54ogj8uKLL6Znz5457bTT3vM+2rZtu8bxF198MRtssEGef/75vPHGG+95DgCAIgkbACgLnTp1ymGHHZZzzjmnLnBYtGhRRo4cmU033TRt2rRJnz598otf/CK1tbWpqanJlClT8qlPfapB12nfvn1dg8VVlQVJct111+Vb3/pW+vTpk//+7/9Onz59MnPmzHrHFnH9VfbYY48sWbIko0ePTv/+/ette/LJJ9O+ffucfPLJ6dOnT+67774kK9+s0bJlyyxfvnytQcrChQvz3//93/nBD36QQw89NOeee+77micAwPshbACgbFxwwQXp3r17jj766Bx++OH50pe+lO7du2fUqFFJkvPOOy8LFizIYYcdlsMOOyzbbbddTjzxxAZd47zzzst3v/vd9O/fP3/729/SoUOHJCsrDZYvX55DDjkkAwYMyJtvvplBgwatduwHvf47HX744fn73/+evn371hv/9Kc/nU6dOuU///M/87nPfS7z5s1L+/btM2fOnHTo0CEf//jH8/nPfz6vvfbae95nv3790qdPnwwfPjxz587Ntdde+77nCgDQEKXatf00AgAAANAAKhsAAACAQgkbAAAAgEIJGwAAAIBCCRsAAACAQgkbAAAAgEK1bOoJrIsdel3e1FMAgHr+/NCuTT0FAFijylb7N/UUCrfhtl9p6il8YNXPT2rqKaxXKhsAAACAQgkbAAAAgEIJGwAAAIBCNYueDQAAAHx0lUp+J29uPDEAAACgUMIGAAAAoFDCBgAAAKBQejYAAABQ1kp+J292PDEAAAAoI2+99Va+973vZb/99kvPnj1z8skn5/nnn6/bPmvWrAwaNCh77rln+vXrl/Hjx9c7fsWKFRkzZkz69u2bPfbYI8cff3zmzJmzXu9B2AAAAABl5LTTTssdd9yR888/P1OmTEn79u3zla98Ja+99loWLFiQIUOGpEuXLrnpppty6qmnZsyYMZkyZUrd8VdeeWUmTZqUUaNGZfLkyWnRokWGDh2apUuXrrd7sIwCAAAAysTs2bPzwAMP5Cc/+Un233//JMl3vvOd/OlPf8p1112XFi1apFWrVhk5cmRatmyZbt26Zc6cORk7dmyOOuqo1NTUZMKECTnzzDOz3377JUlGjx6dPn365Pbbb88RRxyxXu5DZQMAAABlrVSqaPafdfWPf/wjSbL33nvXjbVo0SI9evTII488kunTp6dXr15p2fJftQO9e/fO3LlzU1VVlVmzZmXx4sXZd99967ZXVlZml112yfTp0z/4w1hHwgYAAAAoEx06dEiSvPTSS/XGX3jhhSxYsCBVVVXp3LlzvW0dO3ZMksybNy9VVVVJkk6dOq22z7x58xpr2qsRNgAAAEAjW7hwYV544YXVPgsXLqy338c//vF07949I0eOzEsvvVS3LGL27NmpqanJkiVL0rp163rHrPq+dOnSVFdX1xt75z41NTWNeIf1CRsAAACgkV1zzTU54IADVvtcc8019fZr1apVrrjiiqxYsSKf/exns9dee2XGjBn54he/mMrKyrRp02a10GDV97Zt26ZNmzb1xt65T9u2bRvxDuvTIBIAAICy1pCeB+Vq8ODB6d+//2rj7dq1W21su+22y+TJk/PGG2+kVCqlXbt2OfXUU9O1a9csXLgw8+fPr7f/qu+dO3dObW1t3VhlZWW9fbp3717kLb2n5v/EAAAAoMy1a9cuW2+99Wqffw8bFi1alIEDB+aJJ57IJptsknbt2mXRokX54x//mL59+2bvvffOjBkzsmzZsrpjpk2blq5du6ZDhw7p0aNHKisr88gjj9Q758yZM7PPPvust/sVNgAAAECZqKysTKlUykUXXZSnnnoqs2fPzoknnpgtt9wyhx56aI488shUV1fnnHPOybPPPpupU6dm4sSJOeGEE5Ks7M0wcODAjB49OnfffXdmz56d008/PZ06dcpBBx203u7DMgoAAADKWqlUauoprFeXXnppRo0alYEDB6aioiKf/exnc9ZZZ6Vly5b52Mc+lvHjx+fCCy9M//7906FDh5xxxhkZMGBA3fEjRozI8uXLc/7556e6ujo9e/bMuHHjVmsa2ZhKtasWdJSxHXpd3tRTAIB6/vzQrk09BQBYo8pW+zf1FArXbvvjm3oKH9jC5yY09RTWK8soAAAAgEIJGwAAAIBC6dkAAABAmfM7eXPjiQEAAACFEjYAAAAAhRI2AAAAAIXSswEAAICyVir5nby58cQAAACAQgkbAAAAgEIJGwAAAIBC6dkAAABAWdOzofnxxAAAAIBCCRsAAACAQgkbAAAAgELp2QAAAEBZK/mdvNnxxAAAAIBCCRsAAACAQgkbAAAAgELp2QAAAEBZK5X8Tt7ceGIAAABAoYQNAAAAQKEsowAAAKCsWUbR/HhiAAAAQKGEDQAAAEChhA0AAABAofRsAAAAoKzp2dD8eGIAAABAoYQNAAAAQKGEDQAAAECh9GwAAACgrJVSauop0EAqGwAAAIBCCRsAAACAQgkbAAAAgELp2QAAAEBZK5X8Tt7ceGIAAABAoYQNAAAAQKGEDQAAAECh9GwAAACgrOnZ0Px4YgAAAEChhA0AAABAoSyjAAAAoKxZRtH8eGIAAABAoYQNAAAAQKGEDQAAAECh9GwAAACgzPmdvLnxxAAAAIBCCRsAAACAQgkbAAAAgELp2QAAAEBZK5X8Tt7ceGIAAABAoYQNAAAAQKGEDQAAAECh9GwAAACgrOnZ0Px4YgAAAEChhA0AAABAoYQNAAAAQKH0bAAAAKCslfxO3ux4YgAAAEChhA0AAABAoYQNAAAAQKH0bAAAAKCslUp+J29uPDEAAACgUMIGAAAAoFCWUQAAAFDWSqVSU0+BBlLZAAAAABRK2AAAAAAUStgAAAAAFErPBgAAAMqaV182P54YAAAAUChhAwAAAFAoYQMAAABQKD0bAAAAKGslv5M3O54YAAAAUChhAwAAAFAoYQMAAABQKD0bAAAAKGulkt/JmxtPDAAAACiUsAEAAAAolLABAAAAKJSeDQAAAJQ1PRuaH08MAAAAKJSwAQAAACiUsAEAAAAolJ4NAAAAlLWS38mbHU8MAAAAKJSwAQAAACiUZRQAAACUN6++bHY8MQAAAKBQwgYAAACgUMIGAAAAoFB6NgAAAFDWSno2NDueGAAAAFAoYQMAAABQKGEDAAAAUCg9GwAAAChrpVKpqadAA6lsAAAAAAolbAAAAAAKJWwAAAAACqVnAwAAAGWt5HfyZscTAwAAAAolbAAAAAAKJWwAAAAACiVsAAAAoKyVShXN/tMQNTU1ufTSS9OvX7/stddeOeaYY/Loo4/WbZ81a1YGDRqUPffcM/369cv48ePrHb9ixYqMGTMmffv2zR577JHjjz8+c+bMKeRZrCthAwAAAJSRK6+8MjfddFO+973v5eabb87222+fr33ta6mqqsqCBQsyZMiQdOnSJTfddFNOPfXUjBkzJlOmTKl3/KRJkzJq1KhMnjw5LVq0yNChQ7N06dL1dg/CBgAAACgj99xzT77whS+kb9++6dq1a84+++y89dZbmTFjRqZMmZJWrVpl5MiR6datW/r375/jjjsuY8eOTbKyKmLChAkZPnx49ttvv/To0SOjR4/Oq6++mttvv3293YOwAQAAgPJWKjX/TwO0b98+9913X1544YUsX748N9xwQ1q3bp1ddtkl06dPT69evdKyZcu6/Xv37p25c+emqqoqs2bNyuLFi7PvvvvWba+srKw7dn1pufZdAAAAgA9i4cKFWbhw4Wrj7dq1S7t27eqNffvb385pp52WAw44IC1atEhFRUUuu+yydO3aNVVVVenevXu9/Tt27JgkmTdvXubPn58k6dSp02r7zJs3r8hbek/CBgAAAGhk11xzTa644orVxocPH55TTjml3tgzzzyTysrKXHnllenUqVNuuOGGnHXWWfn5z3+eJUuWpHXr1vX2X/V96dKlqa6urjf2zn1qamqKvKX3JGwAAACARjZ48OD0799/tfF/r2p46aWXctZZZ2XcuHF1SyF23333PPvssxkzZkzatGmzWmiw6nvbtm3Tpk2burF3Bg41NTVp27Ztoff0XoQNAAAAlLcPQbfBNS2XWJPHH388b7/9dnbfffd643vssUfuvffebLvttnVLJVZZ9b1z586pra2tG6usrKy3z78vv2hMH4JHBgAAAB8OnTt3TpI89dRT9caffvrpbLfddtl7770zY8aMLFu2rG7btGnT0rVr13To0CE9evRI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f2NJXv//FQdbbbFxkuS5Oa/nyVnz6+2/8M2l6dRh9V+3KitX/o3rzUX1qyxOOr5XTjtx3zw47fkMP+s3qXnbay8BPko6dd4snTpvliTZ7ePbpf/nL8jUm/6QoSd8Lq+/vij33PXn9N5z9X8+tWzZIkmy6aaV2XTTlYHCSy/+M0nSpWun7LJb/de1bdxuw7wy//XVzvPWWyv/2VZZWb+J8virbs9Prrg1+35q51wyelhat271wW4UoIHea7nEmixYsCCPPfZYTjzxxHrjnTt3rlsqscqq7507d677oXD+/PmprKyst8+/L79oTI0SNrzzV9C5c+e+6zb4KFv1H/gzHqu/bmr6n19KkuzQrf37DhvefLMm06a/kJ/936MfbJJJ/j7ntfTr0zUtWpSyfPm//v/bZZtN88JLC7N06crwolRa+frLI7+wS266ZWbOvfDeevsD8OH15sLF+f39T2SPvbplq603rxvftkvHbFTZJlUvr+zds/HGbdNrnx0z+LiD3u1U66xL10558IEns2zZ8rqgIkmenzM/W2zZPm3arAzFV6xYke+e/4vcOvWhHHbEJ3PeyK/W2x9oJpp/y4YGe/TRR1MqlbL33nvXG997771z7bXXZtmyZXVNIqdNm5auXbumQ4cO2WSTTVJZWZlHHnkk22+/fZJk0aJFmTlzZo455pj1Nv9GeRvFO0va/r287b3K3eCjZFXTxH9v8thrry2TJHNffP8dsh+e8UJ22L59Zj/9ap6cNb/uc+zRe+Sw/9yxQed64KHn03bDVunXp2vd2IZtWqZfn675/UNz6sZGfrNfjvzCLhkz9uGc/d17BA0AHzEjv/1/ufb/7qk39pc//y1vLVqSHXtsnSTpufeOee7Zedlhp62zy25d6j7XX3tffvubPzXoep/69K5ZUl2TBx94sm6sevHSPPjAk/nUp3etG/vBqOtz69SHMuykz2fkqGMFDUCzMXPmzGyzzTarLX048sgjU11dnXPOOSfPPvtspk6dmokTJ+aEE05IsrI3w8CBAzN69OjcfffdmT17dk4//fR06tQpBx30wcPedaVBJDSRmU+9mt/e82zOGvGpbFzZOn95sio7bN8+J39t78x86pXccc/f0rpVRXbfpVNeevnNzPv/b5BYF5f/7JHccPWXcvWVh+faGx7P4upl+eIXds7n/mOHnPHtO1fb/8V5b2aHXpev4UzJo3+Zlwf+OCc/+s5BufTHD2X+K29l6MC9skHrFhl7zcrKid49t8oxX9w9D894IX98eG567rFFvXM89ew/s+it9deMBoDGVVPzdv765Jx03qJ9ttiifTZu1zaDBh+Y/7v6zrRtu0F67r1j/vH3lzN+7O3ZaedtctgRK/t1DTvpkAw55pJ8Y9iYHPWV/bLhhq3zq5sfyj13PprvreEVm1tu9bHMePIna5zDnp/olk9+epec/62J+caph6dDh03y84l3p6bm7QweuvJfpv/0yFO5acrv07PXDtnnkz3y50efrXeO7jtslY033nBNpwdocq+88ko22WST1cY/9rGPZfz48bnwwgvTv3//dOjQIWeccUYGDBhQt8+IESOyfPnynH/++amurk7Pnj0zbty41ZpGNqZSbSOsa+jTp0+OPvroJMn1119f9+dV3x988MEGne/d/iMImrtWLSty0vF754jP75ROHSrz0stv5u77n8sVP3skby1+O1ttsXF+d+uQjBn7cC4f+8hqx+/Tc6tce9WADD55av74SP0lSzvvuHlOP2nf7L3XVilVJM/+/bWM+79H89t7nl3tPGtTuVGrnH1a3xz42e3TulWLPDGzKj+47A+Z+dTKZpIjv7lfvvqlj7/r8WuaHzR3f35o17XvBB8C0x95OiccPzo//tmI9P7kzklW9lI47ODzMuykz+eEbxyaZOVyhRsnP5AbJz+Quc+/kk023SgHHPiJnHTKYfX6Jzw1e25+POaW/HnGs1mxojbbd+ucQccdmAMP7tnguS1aVJ3Rl9yU++55LG/XLMsuu3XJaWceWddM8vvfm5QbJ7/7G57eeU/wYVLZav+179TMdBs8uamn8IH97ZovN/UU1qtGCRvW9DqPdxo+fPWmQO9F2ABAuRE2AFCuPpRhw3FTmnoKH9jfrj6qqaewXjXKMopjjjmm3qs53mn69OmNcUkAAACgTDRKg8jBgwfntddeqzdWW1ubyy+/PMOGDWuMSwIAAABlolHChsMPPzxDhgzJG2+s7Kb/8ssv56tf/Wp+97vf5YYbbmiMSwIAAABlolGWUXzta19Ly5Ytc9xxx2XQoEH54Q9/mKOPPjrDhw+vew8oAAAArJOKUlPPgAZqtP/yHzJkSCoqKnLuuefmpz/9aT7zmc801qUAAACAMtIoYcNLL72UJPmP//iP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f8eOHZMk8+bNy/z585MknTp1Wm2fefPmFXlL72mtYcO5556biy66KP/85z/zla98JX369NGvAQAAgPXmw/Dqy2uuuSZXXHHFauPDhw/PKaecUvd98eLFeeGFF9K+ffucccYZ2WijjXLLLbfka1/7WiZMmJAlS5akdevW9c6x6vvSpUtTXV1db+yd+9TU1BR9W+9qrWFDZWVlLrroovUxFwAAAPhQGjx4cPr377/a+L9XNbRt2zYzZsxIq1at6gKD3XbbLX/7298ybty4tGnTZrXQYNX3tm3bpk2bNnVj7wwcampq0rZt23Web1VVVR566KHMnz8//fv3z/z587PjjjumVatW63T8WsOGf/7zn7nwwgvzhz/8Ia1atcpnPvOZnH322av9BQEAAADWbE3LJd7NRhtttNrYjjvumPvuuy/bbLNN3VKJVVZ979y5c2pra+vGKisr6+3z78sv3s2PfvSjTJw4McuWLUupVMqnP/3pXHLJJVmwYEEmTpyY9u3br/Uca20Qed5552WbbbbJjTfemF/84hfZZJNNcv7556/TBAEAAIB19+c//zl77bVXHn/88XrjTz75ZHbYYYfsvffemTFjRpYtW1a3bdq0aenatWs6dOiQHj16pLKyMo888kjd9kWLFmXmzJnZZ5991nr9CRMmZMKECTnllFNy22231YUXJ510Ul555ZX87//+7zrdx1orG1588cX85Cc/qfv+zW9+M4cddtg6nRwAAAA+qNKHoWnDOtptt92y9dZb59vf/nbOP//8bLrpppk0aVL+/Oc/Z8qUKenUqVPGjRuXc845J8OGDcuTTz6ZiRMn5oILLkiysjfDwIEDM3r06Gy++ebZeuutc+mll6ZTp0456KCD1nr9SZMmZdiwYTnhhBOyfPnyuvHevXtnxIgR+elPf7pO97HWsKFjx46ZO3duttlmmyTJyy+/vMZ3fQIAAAAfTKtWrTJu3LhceumlGTFiRBYuXJhdd901EyZMyC677JIkGT9+fC688ML0798/HTp0yBlnnJEBAwbUnWPEiBFZvnx5zj///FRXV6dnz54ZN27cak0j1+Tll1/OJz7xiTVu69KlSxYsWLBO9/GuYcOJJ56YJFmwYEGOOOKIfOpTn0pFRUUefvjh7LTTTut0cgAAAKBhOnXqlIsvvvhdt+++++65/vrr33V7ixYtcuaZZ+bMM89s8LW33HLLzJgxI5/5zGdW2/aXv/wlW2655Tqd513DhoMPPniN4/369Vu3GQIAAADNype+9KVcdtlladOmTQ444IAkyZtvvpnbbrst48aNywknnLBO53nXsGFNr+RIktra2syZM+d9TBkAAAAa7iPUsqHJDR06NC+++GLGjBmTMWPGJEmOO+64JMnhhx+er3/96+t0nrX2bLj++utz8cUXp7q6um6sffv2+cMf/vB+5g0AAACUqVKplAsuuCCDBw/OtGnT8vrrr2fjjTfOPvvskx122GGdz7PWsGHs2LG5+uqr85Of/CSnnXZa7rvvvrz88ssfaPIAAABA+eratWu6du36vo9fa9iw6aabZo899sjOO++cf/7znznppJNyyCGHvO8LAgAAAOXjrLPOWud9S6VSfvjDH651v7WGDS1btswbb7yRLl265PHHH8+nP/3peu/aBAAAgMakZ0Pjmj59+jrvW1rHh7HWsOGoo47KCSeckJ/+9Kc54ogjctddd2X77bdf54kAAAAA5evee+8t/JxrDRu++MUv5pBDDknbtm0zefLkPPHEE+nbt2/hEwEAAADK2xtvvJFNNtlkrfutNWxIkrZt2yZJOnXqlE6dOuUrX/lKJk2a9MFmCAAAAJSVpUuX5uqrr84jjzySmpqa1NbWJklWrFiR6urq/O1vf8sTTzyx1vOsU9jw72bPnv1+DgMAAIAG07Nh/bnkkkvyi1/8IjvssENee+21bLDBBmnfvn2efvrpvP322xkxYsQ6nafi/Vx8XRtCAAAAAM3HnXfemWOPPTa33nprBg0alN133z033HBD7rjjjmyxxRZZtmzZOp3nfYUNAAAAwIfPggULst9++yVJevTokccffzxJ0rlz53z961/Pb37zm3U6z7suoxg1atQax2tra/P22283dL4fyDPTD16v1wOAtdlw2wuaegoAsEbVz+/f1FOgGdt4442zZMmSJEmXLl0yb968LFq0KJWVlXXf18W7hg2bbrrpux50wgknNGy2AAAA8D5VWMm/3vTq1Ss///nP07t372y77bbZaKONcs899+Twww/PY489lsrKynU6z7uGDcOHDy9ssgAAAED5Gz58eL761a/m61//eiZNmpSvfvWrOffcczN+/Pg8++yzOeaYY9bpPO/rbRQAAADAh89OO+2U22+/PU899VSS5LTTTsuGG26YRx99NAcddFCGDRu2TucRNgAAAFDWLKNYvzp06JDFixcnWfk2yqOOOiq9evVKr1691vkc3kYBAAAAJFn5Noqjjz46X/va1+rGnnjiiQwcODDHH398Fi1atE7nWWvYsGLFiowbNy7f/OY3s2jRolx11VVZvnz5+585AAAAUJYuueSSvPTSS/n2t79dN9a3b99MmDAhzz33XC677LJ1Os9aw4aLL744Tz/9dN27NX//+9/n+9///vubNQAAAFC2fv/73+fMM8/MZz7zmbqxioqKfOpTn8qIESNy1113rdN51tqz4aGHHsrNN9+cAQMGpLKyMhMmTMjhhx/+/mcOAAAADVBRqm3qKXxkvPXWW2nbtu0at2222WZ5/fXX1+k8a61saNmyZSoq/rVb69at07KlvpIAAADwYbPrrrvmhhtuWOO2G2+8MTvvvPM6nWetqcGOO+6Ya6+9NsuXL89zzz2XiRMnpkePHg2bLQAAAFD2TjzxxAwbNiyHHXZYDjrooHzsYx/LggULcs899+Spp57KVVddtU7nKdXW1r5nPcqiRYty0UUX5Xe/+12WL1+ePn365Lzzzstmm21WyI2sm6fX47UAYO023PaCpp4CAKxR9fOTmnoKhTv4jgebegof2B0H92nqKayzBx54IJdffnmefPLJ1NbWplQqZeedd86IESPSr1+/dTrHWsOG8iBsAKC8CBsAKFcfxrDhc3c2/7Dh9oOaT9iwytKlS/P444/npZdeym677ZZu3bqt87FrXUYxatSoNY6fd9556z5DAAAAoGzdf//9ufTSS3PUUUdl4MCBSZIxY8ZkwoQJdfscc8wx9V6J+V7W2iBy0003rftstNFGeeSRR97n1AEAAIBy89hjj+Xkk09ObW1tunTpkiR5+OGHM378+HziE5/IjTfemO9///u56aabMnXq1HU651orG4YPH17v+9e//vWcdNJJDZ89AAAAUHYmTJiQT3ziE5kwYUJatWqVJJk8eXJKpVIuvPDCdO3aNbvuumuefvrpTJ48OUccccRaz7nWyoZ/V1lZmfnz5zd48gAAAPB+VHwIPuXs0UcfzZe//OW6oCFJHnrooXTv3j1du3atG+vdu3eefnrdeiqutbLhe9/7XkqlUpKktrY2f/3rX7P99ts3cOoAAABAOXr99dez+eab131/7rnn8tprr+WQQw6pt1/r1q2zbNmydTrnWsOGf3/F5Re+8IV84QtfWKeTAwAAAOVts802y6uvvlr3fdq0aSmVStl3333r7ffMM8/kYx/72Dqdc61hw/PPP5+LL764gVMFAAAAmoN99tknkydPzuc+97msWLEiN954Y9q0aZNPf/rTdfssXrw41157bXr27LlO51xr2DB79uzU1tbWLaUAAACA9amiVNvUU/hQO/nkk3PUUUflgAMOSKlUyrx58zJixIi0bds2STJp0qRcd911eemllzJmzJh1Oudaw4YOHTrk85//fPbYY49stNFGdePnnXfe+7wNAAAAoFx069YtkydPzoQJE7JgwYKcdNJJOeqoo+q2X3755WnTpk2uuOKK7LTTTut0zncNG2pqatK6devstdde2WuvvT747AEAAICy1L1791x00UVr3HbzzTenQ4cOqahY9/dqvGvY8OUvfzk333xzhg8f3vBZAgAAQEEqrOpvUp06dWrwMe8aS9TWWhMDAAAANNy7VjYsXbo0M2fOfNfQYdddd220SQEAAADN17uGDXPnzs0pp5yyxrChVCrlnnvuadSJAQAAAM3Tu4YN3bt3z9SpU9fjVAAAAGB1696WkHLhmQEAAACFetewoVevXutzHgAAAMCHxLuGDeedd976nAcAAADwIfGuPRsAAACgHFSUmnoGNJSeDQAAAEChhA0AAABAoYQNAAAAQKH0bAAAAKCslUq1TT0FGkhlAwAAAFAoYQMAAABQKGEDAAAAUCg9GwAAAChrFaWmngENpbIBAAAAKJSwAQAAACiUsAEAAAAolJ4NAAAAlDW/kjc/nhkAAABQKGEDAAAAUCjLKAAAAChrFaXapp4CDaSyAQAAACiUsAEAAAAolLABAAAAKJSeDQAAAJS1ilJTz4CGUtkAAAAAFErYAAAAABRK2AAAAAAUSs8GAAAAyppfyZsfzwwAAAAolLABAAAAKJSwAQAAACiUng0AAACUtYpSU8+AhlLZAAAAABRK2AAAAAAUStgAAAAAFErPBgAAAMpaRam2qadAA6lsAAAAAAolbAAAAAAKJWwAAAAACqVnAwAAAGWtotTUM6ChVDYAAAAAhRI2AAAAAIWyjAIAAICy5lfy5sczAwAAAAolbAAAAAAKJWwAAAAACqVnAwAAAGWtolTb1FOggVQ2AAAAAIUSNgAAAACFEjYAAAAAhdKzAQAAgLJWUWrqGdBQKhsAAACAQgkbAAAAgEIJGwAAAIBC6dkAAABAWdOzoflR2QAAAAAUStgAAAAAFErYAAAAABRKzwYAAADKml/Jmx/PDAAAACiUsAEAAAAolGUUAAAAlLWKUm1TT4EGUtkAAAAAZervf/979tprr9xwww11Y7NmzcqgQYOy5557pl+/fhk/fny9Y1asWJExY8akb9++2WOPPXL88cdnzpw563XewgYAAAAoQ2+//XbOPPPMLF68uG5swYIFGTJkSLp06ZKbbropp556asaMGZMpU6bU7XPllVdm0qRJGTVqVCZPnpwWLVpk6NChWbp06Xqbu7ABAAAAytDll1+ejTbaqN7YlClT0qpVq4wcOTLdunVL//79c9xxx2Xs2LFJkpqamkyYMCHDhw/Pfvvtlx49emT06NF59dVXc/vtt6+3uQsbAAAAKGsVpeb/aag//elPmTx5cn74wx/WG58+fXp69eqVli3/1YKxd+/emTt3bqqqqjJr1qwsXrw4++67b932ysrK7LLLLpk+ffr7fgYNpUEkAAAANLKFCxdm4cKFq423a9cu7dq1W23fs846K+edd1622GKLetuqqqrSvXv3emMdO3ZMksybNy/z589PknTq1Gm1febNm/eB72NdCRsAAACgkV1zzTW54oorVhsfPnx4TjnllHpjI0eOzJ577pnDDjtstf2XLFmS1q1b1xtb9X3p0qWprq6uN/bOfWpqaj7QPTSEsAEAAAAa2eDBg9O/f//Vxv+9qmHq1KmZPn16br311jWep02bNquFBqu+t23bNm3atKkbe2fgUFNTk7Zt236ge2gIYQMAAABl7cPQbHBNyyXW5Kabbso///nP9OvXr974d7/73UycODFbbrll3VKJVVZ979y5c2pra+vGKisr6+3z78svGpOwAQAAAMrEj370oyxZsqTe2EEHHZThw4fn0EMPzW233ZZrr702y5Ytq2sSOW3atHTt2jUdOnTIJptsksrKyjzyyCPZfvvtkySLFi3KzJkzc8wxx6y3+xA2AAAAQJn498aOq7Rv3z5bbbVVjjzyyIwbNy7nnHNOhg0blieffDITJ07MBRdckGRlb4aBAwdm9OjR2XzzzbP11lvn0ksvTadOnXLQQQett/sQNgAAAEAz8bGPfSzjx4/PhRdemP79+6dDhw4544wzMmDAgLp9RowYkeXLl+f8889PdXV1evbsmXHjxq3WNLIxlWpXLegoa0839QQAoJ4Nt72gqacAAGtU/fykpp5C4c565N6mnsIHdvE++zf1FNarD0OfDQAAAKCMCBsAAACAQgkbAAAAgEJpEAkAAEBZK5WaQatB6lHZAAAAABRK2AAAAAAUStgAAAAAFErPBgAAAMpaRampZ0BDqWwAAAAACiVsAAAAAAplGQUAAABlza/kzY9nBgAAABRK2AAAAAAUStgAAAAAFErPBgAAAMpaRam2qadAA6lsAAAAAAolbAAAAAAKJWwAAAAACqVnAwAAAGWtotTUM6ChVDYAAAAAhRI2AAAAAIUSNgAAAACF0rMBAACAsqZnQ/OjsgEAAAAolLABAAAAKJSwAQAAACiUng0AAACUtRZNPQEaTGUDAAAAUChhAwAAAFAoYQMAAABQKD0bAAAAKGsVpdqmngINpLIBAAAAKJSwAQAAACiUZRQAAACUtYpSU8+AhlLZAAAAABRK2AAAAAAUStgAAAAAFErPBgAAAMqang3Nj8oGAAAAoFDCBgAAAKBQwgYAAACgUHo2AAAAUNZa6NnQ7KhsAAAAAAolbAAAAAAKJWwAAAAACqVnAwAAAGWtQs+GZkdlAwAAAFAoYQMAAABQKGEDAAAAUCg9GwAAAChrFaXapp4CDaSyAQAAACiUsAEAAAAolGUUAAAAlDWvvmx+VDYAAAAAhRI2AAAAAIUSNgAAAACF0rMBAACAstaiqSdAg6lsAAAAAAolbAAAAAAKJWwAAAAACqVnAwAAAGWtotTUM6ChVDYAAAAAhRI2AAAAAIUSNgAAAACF0rMBAACAslZRqm3qKdBAKhsAAACAQgkbAAAAgEIJGwAAAIBC6dkAAABAWWtRauoZ0FAqGwAAAIBCCRsAAACAQgkbAAAAgELp2QAAAEBZq9CzodlR2QAAAAAUStgAAAAAFMoyCgAAAMqaZRTNj8oGAAAAoFDCBgAAAKBQwgYAAACgUHo2AAAAUNb0bGh+VDYAAAAAhRI2AAAAAIUSNgAAAACF0rMBAACAstaiVNvUU6CBVDYAAAAAhRI2AAAAAIUSNgAAAACF0rMBAACAsuZX8ubHMwMAAAAKJWwAAAAACiVsAAAAAAqlZwMAAABlraLU1DOgoVQ2AAAAAIUSNgAAAACFsowCAACAsmYZRfOjsgEAAAAolLABAAAAKJSwAQAAACiUng0AAACUtRal2qaeAg2ksgEAAAAolLABAAAAKJSwAQAAACiUsAEAAICyVlFq/p+GqKqqyn/913+ld+/e2WuvvTJs2LA888wzddtnzZqVQYMGZc8990y/fv0yfvz4esevWLEiY8aMSd++fbPHHnvk+OOPz5w5c4p4FOtM2AAAAABlora2Nl//+tfz8ssvZ/z48bnxxhvTpk2bDBkyJG+99VYWLFiQIUOGpEuXLrnpppty6qmnZsyYMZkyZUrdOa688spMmjQpo0aNyuTJk9OiRYsMHTo0S5cuXW/3IWwAAACAMvHqq6+mW7duufDCC7PbbrulW7duOfnkk/Pqq6/m6aefzpQpU9KqVauMHDky3bp1S//+/XPcccdl7NixSZKamppMmDAhw4cPz3777ZcePXpk9OjRefXVV3P77bevt/sQNgAAAECZ6NChQ0aPHp3tttsuycrwYfz48enYsWN23HHHTJ8+Pb169UrLli3rjundu3fmzp2bqqqqzJo1K4sXL86+++5bt72ysjK77LJLpk+fvt7uo+XadwEAAICm09CeB+Vo4cKFWbhw4Wrj7dq1S7t27dZ4zNlnn52bb745rVu3zk9+8pNstNFGqaqqSvfu3evt17FjxyTJvHnzMn/+/CRJp06dVttn3rx5RdzKOhE2AAAAQCO75pprcsUVV6w2Pnz48JxyyilrPGbo0KH56le/muuuuy7f+MY3cu2112bJkiVp3bp1vf1WfV+6dGmqq6vrjb1zn5qamiJuZZ0IGwAAAKCRDR48OP37919t/N2qGpJkhx12SJJceOGF+ctf/pKf//znadOmzWqhwarvbdu2TZs2berG3hk41NTUpG3bth/4PtaVsAEAAAAa2Xstl3in+fPn5+GHH86hhx6aUmnl+pGKiop07949VVVV6dy5c91SiXcekySdO3dObW1t3VhlZWW9ff59+UVj0iASAACAslZRav6fdTVv3ryceeaZmTFjRt3Y22+/nZkzZ6Zbt27Ze++9M2PGjCxbtqxu+7Rp09K1a9d06NAhPXr0SGVlZR555JG67YsWLcrMmTOzzz77FPI81oWwAQAAAMrE7rvvnt69e+f888/P9OnT8/TTT+eb3/xmXn/99QwZMiRHHnlkqqurc8455+TZZ5/N1KlTM3HixJxwwglJVvZmGDhwYEaPHp27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\n",
      "text/plain": [
       "<Figure size 1368x1296 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(cm, ['FAKE','REAL'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9058390320883746\n",
      "Confusion Matrix:\n",
      " [[826 109]\n",
      " [ 70 896]]\n"
     ]
    }
   ],
   "source": [
    "# Initialize Naive Bayes classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "\n",
    "# Fitting the classifier to the training data\n",
    "nb_classifier.fit(count_train, y_train)\n",
    "pred = nb_classifier.predict(count_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(f'Accuracy: {score}')\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels= ['FAKE', 'REAL'])\n",
    "print('Confusion Matrix:\\n',cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Naive Bayes Multinomial Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FAKE [(-12.69233432692536, '000035'), (-12.69233432692536, '0001'), (-12.69233432692536, '000km'), (-12.69233432692536, '0011'), (-12.69233432692536, '005'), (-12.69233432692536, '005s'), (-12.69233432692536, '00684'), (-12.69233432692536, '006s'), (-12.69233432692536, '007'), (-12.69233432692536, '008s')]\n",
      "\n",
      "REAL [(-6.420654267306063, 'state'), (-6.411250189660262, 'cruz'), (-6.381634244827573, 'republican'), (-6.344757796574216, 'campaign'), (-6.328064396317935, 'president'), (-6.299413849491218, 'sanders'), (-6.150857165942491, 'obama'), (-5.769684532668819, 'clinton'), (-5.569466461894935, 'said'), (-5.3223447522834055, 'trump')]\n"
     ]
    }
   ],
   "source": [
    "# Instantiate the classifier: nb_classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "# Fit to the training data\n",
    "nb_classifier.fit(tfidf_train, y_train)\n",
    "# Predict the labels: pred\n",
    "pred = nb_classifier.predict(tfidf_test)\n",
    "# Compute accuracy: score\n",
    "score = metrics.accuracy_score(y_test,pred)\n",
    "\n",
    "# Get the class labels: class_labels\n",
    "class_labels = nb_classifier.classes_\n",
    "\n",
    "# Extract the features: feature_names\n",
    "feature_names = tfidf_vectorizer.get_feature_names()\n",
    "\n",
    "# Zip the feature names together with the coefficient array and sort by weights: feat_with_weights\n",
    "feat_with_weights = sorted(zip(nb_classifier.feature_log_prob_[1], feature_names))\n",
    "\n",
    "# Print the first class label and the top 20 feat_with_weights entries\n",
    "print(class_labels[0], feat_with_weights[:10])\n",
    "print()\n",
    "\n",
    "# Print the second class label and the bottom 20 feat_with_weights entries\n",
    "print(class_labels[1], feat_with_weights[-10:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "uh what dat mean up there^"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9058390320883746\n",
      "Confusion Matrix:\n",
      " [[826 109]\n",
      " [ 70 896]]\n"
     ]
    }
   ],
   "source": [
    "# Initialize Naive Bayes classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "\n",
    "# Fitting the classifier to the training data\n",
    "nb_classifier.fit(count_train, y_train)\n",
    "pred = nb_classifier.predict(count_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(f'Accuracy: {score}')\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels= ['FAKE', 'REAL'])\n",
    "print('Confusion Matrix:\\n',cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9058390320883746\n",
      "Confusion Matrix:\n",
      " [[826 109]\n",
      " [ 70 896]]\n"
     ]
    }
   ],
   "source": [
    "# Initialize Naive Bayes classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "\n",
    "# Fitting the classifier to the training data\n",
    "nb_classifier.fit(count_train, y_train)\n",
    "pred = nb_classifier.predict(count_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(f'Accuracy: {score}')\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels= ['FAKE', 'REAL'])\n",
    "print('Confusion Matrix:\\n',cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9058390320883746\n",
      "Confusion Matrix:\n",
      " [[826 109]\n",
      " [ 70 896]]\n"
     ]
    }
   ],
   "source": [
    "# Initialize Naive Bayes classifier\n",
    "nb_classifier = MultinomialNB(alpha=0.1)\n",
    "\n",
    "# Fitting the classifier to the training data\n",
    "nb_classifier.fit(count_train, y_train)\n",
    "pred = nb_classifier.predict(count_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(f'Accuracy: {score}')\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels= ['FAKE', 'REAL'])\n",
    "print('Confusion Matrix:\\n',cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 240
    },
    "id": "oxAXnJZZOu8V",
    "outputId": "e070b361-5309-48a1-a50f-cef57f651207"
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'MultinomialNB' object has no attribute 'classes_'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-62341844ba36>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Get the class labels: class_labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mclass_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnb_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Extract the features: feature_names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'MultinomialNB' object has no attribute 'classes_'"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "nb_classifier = MultinomialNB()\n",
    "\n",
    "# Get the class labels: class_labels\n",
    "class_labels = nb_classifier.classes_\n",
    "\n",
    "# Extract the features: feature_names\n",
    "feature_names = tfidf_vectorizer.get_feature_names()\n",
    "\n",
    "# Zip the feature names together with the coefficient array and sort by weights: feat_with_weights\n",
    "feat_with_weights = sorted(zip(nb_classifier.coef_[0], feature_names))\n",
    "\n",
    "# Print the first class label and the top 20 feat_with_weights entries\n",
    "print(class_labels[0], feat_with_weights[:20])\n",
    "\n",
    "# Print the second class label and the bottom 20 feat_with_weights entries\n",
    "print(class_labels[1], feat_with_weights[-20:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['FAKE' 'REAL']\n"
     ]
    }
   ],
   "source": [
    "all_classes = np.array(['FAKE','REAL'])\n",
    "print(all_classes)\n",
    "\n",
    "nb =MultinomialNB(alpha=0.01)\n",
    "nb.partial_fit(X_train, y_train, classes=all_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'MultinomialNB' object has no attribute 'A'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-f6cddd37d38e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnbclass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'MultinomialNB' object has no attribute 'A'"
     ]
    }
   ],
   "source": [
    "all_classes = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nbclass= MultinomialNB()\n",
    "hasattr(MultinomialNB(), 'classes_')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'MultinomialNB' object has no attribute 'coef_'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-71-7dadadfbdbba>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Zip the feature names together with the coefficient array and sort by weights: feat_with_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfeat_with_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnb_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Print the first class label and the top 20 feat_with_weights entries\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclass_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeat_with_weights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'MultinomialNB' object has no attribute 'coef_'"
     ]
    }
   ],
   "source": [
    "# Zip the feature names together with the coefficient array and sort by weights: feat_with_weights\n",
    "feat_with_weights = sorted(zip(nb_classifier.coef_[0], feature_names))\n",
    "\n",
    "# Print the first class label and the top 20 feat_with_weights entries\n",
    "print(class_labels[0], feat_with_weights[:20])\n",
    "\n",
    "# Print the second class label and the bottom 20 feat_with_weights entries\n",
    "print(class_labels[1], feat_with_weights[-20:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'is_equal'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-56-375658491810>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnb_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_log_prob_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_equal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnb_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_log_prob_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m#sum([np.exp(1)**x for x in nb_classifier.feature_log_prob_[1]])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#print(class_labels)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#print(feature_names)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'is_equal'"
     ]
    }
   ],
   "source": [
    "nb_classifier.feature_log_prob_[1].shape\n",
    "#sum([np.exp(1)**x for x in nb_classifier.feature_log_prob_[1]])\n",
    "#print(class_labels)\n",
    "#print(feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.22798494024257998"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb_classifier.feature_log_prob_[1][100]-nb_classifier.feature_log_prob_[0][100]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alpha of <u>0.1</u> returns the highest accuracy score!\n",
    "\n",
    "<p>\n",
    "\n",
    "We will use 0.1 in our Naive Bayes modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgEAAAEJCAYAAAANXfSRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAA+FElEQVR4nO3deVyU9fr/8dewbyKCDOCGOyYyaqAiooYiKIobGqilZprVrzhQuaSmpeFeZna0LNOjqYmlCKlIorgEqeCOCyq5y6K4IijL/P7oHM7h2wIqww3M9Xw8euTNvcx7ribn4nPf9+dWabVaLUIIIYTQOwZKBxBCCCGEMqQJEEIIIfSUNAFCCCGEnpImQAghhNBT0gQIIYQQekqaACGEEEJP1bgmIDU1VekINZ7UuHJInXVPaqx7UuOqrcY1Afn5+UpHqPGkxpVD6qx7UmPdkxpXbTWuCRBCCCFE+UgTIIQQQugpaQKEEEIIPSVNgBBCCKGnpAkQQggh9JQ0AUIIIYSekiZACCGE0FPSBCjo4eM8Ju6I4LOkFTwqfKx0HCGEEHrGSOkA+kqr1fJV8lou373OpTvXyLyfzcSub1DHvLbS0YQQQugJGQlQyM4L+0m6kkKIW38meL/O1fsZTNk5j4u3ryodTQghhJ6QJkABl+5cZdWRSNo6tqZ/q1541Ncwq8e7aLVapu9ayOHrJ5SOKIQQQg9IE1DJ8gvyWZT4DVYmlrzVaRQGqt//EzSu05DZvSbhVEvNvP3L2J62W+GkQgghajppAirZN4e/58aDLEI7j6G2mXWpdbbmNnzU41086mlYeSSSFSnfU1RcpFBSIYQQNZ00AZUo4bck9l48wJDWAbiqW/7pNmZGprzb5TX6t+rFjvN7mLdvKQ8L8io5qRBCCH0gTUAluXrvBitSvsdV3ZKg1gF/u62ByoCX2g5mvMcITmSe4YP4hWTn3qqkpEIIIfSFNAGV4FHhYxYlfoOpkQlve76CgUH5yt6zmTdTur/NrYe3mfLzPM7d+k3HSYUQQugTaQIqwaojG7ly9zpve76CrbnNE+3r5tCKCN+JmBmZ8uHuRSReTtFNSCGEEHpHmgAd23/pEPHp+xn4nD9tHVs/1THqWzsS0WsSTes04rOkb9h0ajtarbaCkwohhNA30gTo0I37WSxPXotL3WYEtwl8pmNZm1ox/YV/4O3cke9PRLP04GoKigoqKKkQQgh9JNMG60hBUQGfJX6DkYER/+g8BkMDw2c+prGhMW93Gk29WmoiT/5EVu4t3uvyGrVMrSogsRBCCH2j05GAmJgYAgIC8PPzY+3atX9Yv2fPHgIDAwkMDOTdd98lNzcXgOvXrzNixAh69+7NG2+8UfLz6mTNsU38ducKb3YcSV0L2wo7rkqlYohrX0I9x3D+1m9M3Tmf6/czK+z4Qggh9IfOmoDMzEwWLVrEunXriIqKYsOGDZw/f75k/b1795g8eTKLFi0iJiaGVq1asWjRIgA++ugjhg8fTmxsLG3atGHp0qW6iqkTB64eIfZcAn1b9sSjvkYnr+Ht3IHpPmE8LMhj6s75pGal6eR1hBBC1Fw6awISExPx9PTExsYGCwsL/P39iY2NLVl/8eJF6tWrR/PmzQHw8fFh586dFBQUcOjQIfz9/QEYPHhwqf2quqwHN1l2cA3NbJ0ZoRmo09dyqduM2b6TsDGz5uM9n7M7PVGnryeEEKJm0VkTkJWVhb29fcmyWq0mM/O/w9aNGzcmIyODM2fOALB9+3Zu3rzJ7du3sbKywsjo98sV7O3tS+1XlRUWFfJZ0goAwjuPxchQ95dcqK3q8nHPCbjat2TZoTWsOx5FsbZY568rhBCi+tPZt1RxcTEqlapkWavVllq2trZm3rx5fPDBBxQXF/Piiy9ibGz8h+2APyyXJSVFmXvpd988wPk7Fxng2JMrZy9xhUuV9tp+Vp0xyNMSdXoHpy+n0dehO8YGumtClKqxvpE6657UWPekxrrn7u7+VPvp7FvC0dGR5OTkkuXs7GzUanXJclFREY6OjmzcuBGA48eP07BhQ2xtbbl//z5FRUUYGhr+Yb/yeNpiPIvD109w8PwJ/Jp3Y4T7kEp/fYAOWg+2psWz5ugmCu8UM9H7DeqY167w10lJSVGkxvpG6qx7UmPdkxpXbTo7HeDl5UVSUhI5OTnk5eURFxdHt27dStarVCrGjBlDZmYmWq2WVatWERAQgLGxMR4eHmzbtg2AqKioUvtVRbce3uafB/6Fs00DRrZTpgGA32vaz8WXCd7juXovgyk753HpzlXF8gghhKjadNYEODg4EB4ezsiRIxk4cCD9+vVDo9Ewbtw4Tpw4gYGBATNnzmTs2LH07t0ba2trXn31VQBmzJhBZGQkAQEBJCcnExYWpquYz6youIjFSSsoKC4k3GssJobGSkfCo35bZvZ4F61WywfxCzl8/aTSkYQQQlRBKm0Nm3+2soeevj+xhU2nYgn1fAVv546V9rrlkfPwDvP2LeXi3auMbjeUPi19KuS4MrxXOaTOuic11j2pcdUm0wY/g+MZp9l8agc9mnhVuQYAwNbCho96vot7PQ0rj0TybcoGioqLlI4lhBCiipAm4CndybvLkl9XUt/akVeeD1Y6zl8yMzLlPa/XCHTxJfZ8AvP3L+NhQZ7SsYQQQlQB0gQ8heLiYj7/dSV5hfmEe43F1MhE6Uh/y8DAgJfbBfGax3COZZxmevwn3MzNUTqWEEIIhUkT8BQ2nY7lZNZZxjwfQsPa9ZSOU26+zboypdtb3HyYw/s753H+1kWlIwkhhFCQNAFP6FRWGhtTf8LbuSM+TTorHeeJaRyf42PfCZgaGjNj96f8euWw0pGEEEIoRJqAJ3Av/z6Lf/0WRyt7xrkPe+KZDKuKBtZOzPadRFObhnya+DWbT8VSw24SEUIIUQ7SBJRTsbaYfx78Fw8e5RLeeSzmxmZKR3om1ma1+MAnDO9GHVh/YgtLD66msKhQ6VhCCCEqke6fcFND/HR2J0dupDLWPYTGdRoqHadCmBga87bnKzjVUrMxdSvZubd4t8tr1DK1UjqaEEKISiAjAeWQdjOd9ce34NngeXo1q9pTGD8plUrF0Db9CPV8hbRbvzFt5wJu3M9SOpYQQohKIE1AGR48yuWzpBXYWdRhfIcR1fY6gLJ4O3dk+gthPCh4yNSd8zmVlaZ0JCGEEDomTcDf0Gq1LD20htv5dwnrPBZLEwulI+lUK/tmzPadSG2zWsza8zkJvyUpHUkIIYQOSRPwN7af203ytWO8pBlEc7vGSsepFA5W9nzccwKt7Vuw9OBq1h/fQrG2WOlYQgghdECagL9wIecSa45twqOehoCWPZSOU6ksTSx4v9tb+Db1ZvPpWD5LXMHjwsdKxxJCCFHB5O6AP/HwcR6fJX6DjZk1b3YcWWOvA/g7RgaGjPMYTj1rB9Yc3cTNhzlM9H4dG/PaSkcTQghRQWQk4P/QarV8lbyW7Ic5/MPzVaxMLZWOpBiVSkU/F1/e8x7PlbvXmbJzPpfvXFM6lhBCiAoiTcD/sfPCfpKupBDi1p9W9s2UjlMldKjflo96vEuRtogP4hdyIfeK0pGEEEJUAGkC/selO1dZdSSSto6t6d+ql9JxqpSmto2Y4zsZRyt7frwRx8rDkTx8LI8kFkKI6kyagH/LL8hnUeI3WJlY8lanURiopDT/l62FDR/1eId21q2IPZfAP7Z/yN6LB+S5A0IIUU3JN92/fXP4e248yCK08xhqm1krHafKMjM2w0/dhTm9JmFvYcsXB1bx4e5P5VoBIYSohqQJABJ+S2LvxQMMaR2Aq7ql0nGqhaa2znzsO4HxHiO4evcGE+Nm868jP/CwQE4RCCFEdaH3twhevXuDFSnf46puSVDrAKXjVCsGKgN6NvOmY4N2rD++hW1pu0i8nMzL7YLo0shDL2+tFEKI6kSnIwExMTEEBATg5+fH2rVr/7A+NTWVoKAg+vfvz/jx47l37x4Ax48fJygoiMDAQMaPH092drZO8j0qfMyipG8wNTLhbc9XMDCQgZGnUcvUitc6jCDCdyK25jZ8/uu3zEz4jCt3rysdTQghxN/Q2bdeZmYmixYtYt26dURFRbFhwwbOnz9fapuIiAhCQ0OJjo6mSZMmrFixAq1WS2hoKBMmTCAmJoYBAwbwwQcf6CTjqiMbuXL3Om91egVbcxudvIY+aW7XmAjfiYxzH87FO1eZuCOCNUd/JK8gX+loQggh/oTOmoDExEQ8PT2xsbHBwsICf39/YmNjS21TXFxMbm4uAHl5eZiZmXH79m3y8/Px9PQEwMfHh/379/P4ccVOW7v/0iHi0/cz8Dl/2jm1rtBj6zMDAwN6Ne/K4oCP6N6kMzFndxK2/UMSLyfLXQRCCFHF6KwJyMrKwt7evmRZrVaTmZlZapvJkyczbdo0vL29SUxMJCQkhDp16mBhYcH+/fsB2Lp1KwUFBdy+fbvCst24n8Xy5LW41G1GcJvACjuu+C9rUyte7/ASH/ecgI2ZNZ8lreDjPYu5di9D6WhCCCH+TWcXBhYXF5e6MEyr1ZZazs/PZ+rUqaxatQqNRsPKlSuZNGkSy5cv5/PPP2fevHksXLiQAQMGYGNjg7GxcblfOyUl5S/XFWqL+O5qNBRDD8sOHD1y9Knen777uxr/X0Nse3HU6Ax7s5N5d/ssOti0wcu2PSYG5f9vqq+epM7i6UiNdU9qrHvu7u5PtZ/OmgBHR0eSk5NLlrOzs1Gr1SXLaWlpmJqaotFoAAgODmbx4sW/hzIyYs2aNQDcunWLpUuXYmNjU+7X/rtifJuygcxHt5jo/QYe9TVP8pbEv6WkpDzxB64DHXgxfwBrj0eR8FsS5x9dYVT7IXRq0F7uIvgLT1Nn8WSkxronNa7adHY6wMvLi6SkJHJycsjLyyMuLo5u3bqVrHd2diYjI4P09HQA4uPjcXNzA2DKlCkcP34cgJUrV9K7d+8KuXL/wNUjxJ5PoG/LntIAKKD2v5/KOKvne1iZWvJp4tfM3ruE6/czy95ZCCFEhdPZSICDgwPh4eGMHDmSgoIChgwZgkajYdy4cYSGhuLm5sacOXMICwtDq9ViZ2fH7NmzAfjwww+ZMWMGeXl5uLi4EBER8cx5sh7cZNnBNTSzdWaEZuAzH088PZe6zZjbazJx5/fy/clo3o2dRX+XXgxq3RszI1Ol4wkhhN5QaWvYJdt/NvRUWFTI9F2fcP1+JvP9pqC2qqtQupqhIof37uTf47tjm9h78QB1LWwZ3X4oHeq3lVMEyDBqZZAa657UuGrTi9lx1p/Ywvmci7ze4SVpAKoYGzNr3uo0mo96vIOFsTkLf/mKufv+Scb9LKWjCSFEjVfjm4DD108Qc3Ynfs274dnweaXjiL/wnH0L5vm9z+j2QzmTfYF3Ymex4UQMjwordn4IIYQQ/1Wjnx1w6+Ft/nngXzjbNGBkuyFKxxFlMDQwJKBlDzo3dOe7Y5v48dQ29l46wCvth+JeTyOnCIQQooLV2JGAouIiFiet4HFxIeFeYzExlHvSq4s65rV52/MVPvQJx8zQhPn7v2TevqVkPNDNMySEEEJf1dgmYGPqT5y5eYHX3IdTr5aD0nHEU2itbsk8/6mMbBfEqexzvLt9JpEnf+KxnCIQQogKUSNPBxzPOM3mUzvo0cSLro07Kh1HPAMjA0P6ufji1ciDNUd/5IfUrey7eIBXnn+R5+u5KR1PCCGqtRo3EvCg8CFLfl1JfWtHXnk+WOk4ooLYmtvwj86vMv2Ff2BkaMTcfUuZv28ZWQ9uKh1NCCGqrRrXBPyUmUBeYT7hXmMxNTJROo6oYG0cWrHAbyovtR3EiayzhMfO5IfUbTwuKlA6mhBCVDs1rgm4lHedMc+H0LB2PaWjCB0xMjSifys/PuszA496GiJPxvBe7CyO3khVOpoQQlQrNa4J6G3vjU+TzkrHEJXAzqIO4V5jmdY9FJVKxey9X7Bw/1dk595SOpoQQlQLNa4JaFu7ldxPrmc0js+x0H8awzUDOZZxivDtH7Hp1HYK5BSBEEL8rRrXBAj9ZGxozMDn/FnUZwbtndrw/Ylo3ov9mGMZp5SOJoQQVZY0AaJGqWtpy7tdXmNKt7cBiNizhE9+Wc7N3ByFkwkhRNVTI+cJEKKdU2sW9p5GzNmdbDq1neRrx+jU8Hn6tHiBlnZN5ZSREEIgTYCowYwNjRncug/dnDuxNW0Xu39LJPFyMk3qNKRPCx+8GnnIdNJCCL0mpwNEjVfX0pZR7YfwZeBsxroPo7CokKUHV/NGzBTWHY+SUwVCCL0lIwFCb5gZm+HXvBu9mnUlNSuN2HMJbDkTx5YzcXSo35Y+LXxobd9CThUIIfSGNAFC76hUKto4uNDGwYXs3FvEnd9LfPovHLx6lEa169O7RXe8nTtiZmSqdFQhhNApaQKEXrO3tGNE20EMde3L/svJxJ7bzfLkdaw9thmfJl74t+iOg5W90jGFEEInpAkQAjAxMqFHUy98mnTm7M10Ys/tZvu53WxN20X7em3o0+IF3BxaYaCSy2iEEDWHNAFC/A+VSkUr+2a0sm9GzsM7/HxhHzsv7CPi+hLq1XLAv3l3ujfxxMLYXOmoQgjxzHT6a01MTAwBAQH4+fmxdu3aP6xPTU0lKCiI/v37M378eO7duwfA1atXGTFiBAMGDODll1/m2rVruowpxJ+ytbAh2C2QpYERvNVpNJbG5qw8Eskb0VP4NmUD1+9lKB1RCCGeic6agMzMTBYtWsS6deuIiopiw4YNnD9/vtQ2ERERhIaGEh0dTZMmTVixYgUAixcvpm/fvmzZsgU/Pz8WLVqkq5hClMnY0JhujTsR0WsSs30n0aF+W3am7yds+0dE7PmclOsnKC4uVjqmEEI8MZ01AYmJiXh6emJjY4OFhQX+/v7ExsaW2qa4uJjc3FwA8vLyMDMzK/n5gwcP/vBzIZTW3K4xb3mOZllgBMFtArl89zrz9i3lH9tmEHNmJw8e5yodUQghyq3MawJu375NnTp1nvjAWVlZ2Nv/96pqtVrN8ePHS20zefJkxowZw+zZszE3NycyMhKAf/zjH4SEhLBmzRoKCgrYsGHDE7++ELpU28yaINcABjznz6FrR4k9l8CaYz8SeTKGrs4d6d3iBRrZ1Fc6phBC/C2VVqvV/t0GXl5edO7cmWHDhuHh4VHuAy9btoxHjx4RFhYGQGRkJCdPnmTmzJkA5OfnExQUxJw5c9BoNKxcuZKkpCSWL1/OsGHDePXVV/H19WXHjh188cUXREdHl2sSl5SUlHJnFKIiZT66xeG7qZy6f4FCbRGNzJ14vnZrWlg6y10FQgidcnd3f6r9yhwJ2LVrF1u3bmX+/Pnk5eUREhLCgAEDsLKy+tv9HB0dSU5OLlnOzs5GrVaXLKelpWFqaopGowEgODiYxYsXk5OTQ3p6Or6+vgD4+/szY8YMbt++ja2tbbne1NMWQ5RPSkqK1PgvBODH/UcP2JWeSNz5PURlxGNnUQe/Zt3o2cwba9O////mf0mddU9qrHtS46qtzF9PzMzMCAoKIjIykmnTpvHtt9/StWtXPvroI27fvv2X+3l5eZGUlEROTg55eXnExcXRrVu3kvXOzs5kZGSQnp4OQHx8PG5ubtSpUwdTU9OSBiIlJQVLS8tyNwBCKK2WqRUDnvNjSd9ZTPB+nXq11Kw/sYU3ot9n6YHVpOdcUjqiEEIA5ZwnYO/evWzcuJGUlBQCAwMZPHgwe/bs4c0332T9+vV/uo+DgwPh4eGMHDmSgoIChgwZgkajYdy4cYSGhuLm5sacOXMICwtDq9ViZ2fH7NmzUalUfPHFF8yaNYv8/HwsLS1ZsmRJhb5pISqDgYEBHeq3pUP9tly9e4PYcwnsuXSAhItJtLRrSu8WL+DZoD1GhjJdhxBCGWVeE+Dj44ONjQ3Dhw8nMDCw1JX6PXv2JD4+Xuchn4QMPeme1PjpPXycR8LFJGLPJZDxIBsbM2t6NetKr2ZdsTGvXWpbqbPuSY11T2pctZX5K8gnn3yCi4sLlpaWPH78mFu3bmFnZwdQ5RoAIao6CxNzAlr2oHeLFziWcYrYcwlsTN3KptOxeDZoT58WPrSwayJPMhRCVIoym4CMjAwmT55MXFwc165dY9iwYcyePZsePXpURj4haiQDlQHtndrQ3qkNN+5nseNcArsvJvHL5WSa1mlE7xYvYKE1VDqmEKKGK/PCwC+//JLVq1cD0KRJEzZv3izn6IWoQE611Ix+/kW+CpzDWPcQHhU9ZunB1ay8vJkz2ReUjieEqMHKbAKKi4txdHQsWXZycpIpUoXQATNjM/yad+fT3tOZ6P0GBdpCpu9ayDfJ63n4OE/peEKIGqjMJsDW1pbvv/+ewsJCioqK+OGHH6hbt25lZBNCL6lUKjzqa3i1URB9W/bk5/R9hMd+xMGrR5WOJoSoYcpsAmbOnElkZCQajQaNRkNkZCQzZsyojGxC6DUTA2NGtR9CRM+JWJtYsfCXr1j4y1fk5N1ROpoQooYo88LAxo0bs2nTJu7evYuhoWGZMwUKISpWc7vGzPF7n5/O7mRj6lbe2T6Tl9oOokfTLjIdsRDimZTZBOTk5BAdHU1ubi5arZbi4mIuXbrEJ598Uhn5hBCAkYEhA5/zp1OD9ixPXsvy5HXsu3SQ8R4jqGftWPYBhBDiT5T5a0RYWBiJiYn8+OOPZGRkEBUVhYGB/PYhhBKcaqmZ/kIYb3R4mct3r/Pejgh+SN1GYVGh0tGEENVQmd/m169fZ/ny5XTr1o2XXnqJ9evXl8z3L4SofCqVCp+mXizqM4OO9dsSeTKGSXGzSbsp/18KIZ5MmU3Af+4EaNy4MWlpaTg4OFBYKL91CKE0GzNrwrzGMqnrmzwsyOeD+IV8m7KBvIJ8paMJIaqJMq8JsLOz45tvvqFdu3YsWbIEKysr8vPlLxkhqgr3em607tOC9Se2sOPcHg5dO8ZYj2G413NTOpoQooor1y2CJiYmeHh40KZNGz7//HPee++9ysgmhCgnc2MzxjwfzKye72FhbMa8fUtZlPgNd/LuKh1NCFGFldkEzJs3j5EjRwIwYcIEoqKi6NWrl86DCSGeXMu6TZnnN4XgNoEcunaM8O0fsSs9kTIeFiqE0FNlNgGnT5+Wv0CEqEaMDI0Icg1gof9UGtk04MtDa5iZ8Bk37mcpHU0IUcWUeU2AWq2mb9++tG3bFktLy5KfT5s2TafBhBDPpp61IzN8wtiVnsh3xzbx3o6PGdI6gMBWvTAykCcUCiHK0QS0b9+e9u3bV0YWIUQFM1AZ4NvMG/d6bnx7eAPrT2wh8XIy4zu8RHO7xkrHE0IorMwm4K233qqMHEIIHapjXpt3u7zGoWvH+CZlPVPj59OnhQ8hbQIxMzZTOp4QQiFlNgGBgYF/+vOYmJgKDyOE0K0O9dviat+Sdcej2Ja2i0NXjzLWYxjtndooHU0IoYAym4APPvig5M8FBQVs3bqVhg0b6jSUEEJ3LEzMGesxDG/njnyV/B1z9v4T70YdGNV+CLXNrJWOJ4SoRGU2AR07diy17OXlRUhICG+88YbOQgkhdK+VfTPm+00h6vQONp2O5WjGKUa2C6J7Y09UKpXS8YQQlaDMJuD/un37NllZ5bvVKCYmhmXLllFYWMioUaMYMWJEqfWpqalMnz6dgoICnJycWLBgAQUFBYwZM6Zkm/v373P79m2OHDnypFGFEGUwNjRmaJt+dG7ozleHvmPpwdXsu3SQcR7DcbSyVzqeEELHnviagOvXrxMcHFzmgTMzM1m0aBGbNm3CxMSEkJAQOnXqRPPmzUu2iYiIIDQ0lO7duzN37lxWrFhBeHg4W7ZsAaC4uJhRo0YRHh7+pO9LCPEEGtR24qOe77Lzwj7WHovivdhZvNimH31b9sRQbicUosZ6omsCVCoVtra2NGvWrMwDJyYm4unpiY2NDQD+/v7ExsaWutuguLiY3NxcAPLy8qhdu3apY/z444+Ym5v/5cWJQoiKY6AywK95dzzqteWbw9/z3bHN/HLp99sJm9o2UjqeEEIHypwxsFGjRmzbto2OHTtiZ2fHJ598ws2bN8s8cFZWFvb2/x1OVKvVZGZmltpm8uTJTJs2DW9vbxITEwkJCSlZV1RUxJdffsm77777JO9HCPGMbC1smNBlPO94jeN2/l3e3zmXNUd/5FHhY6WjCSEqWJkjAZMnT6ZHjx4A1K9fn44dO/L+++/z9ddf/+1+xcXFpS4u0mq1pZbz8/OZOnUqq1atQqPRsHLlSiZNmsTy5csB2LdvH40bN8bFxeWJ31RKSsoT7yOejNS4cihZZ2NglNMAEm4dIubsTvZeOIC/ugtNLBoolkkX5LOse1Jj3XN3d3+q/cpsAm7fvl3yACFTU1NGjx5NVFRUmQd2dHQkOTm5ZDk7Oxu1Wl2ynJaWhqmpKRqNBoDg4GAWL15csn7nzp0EBASU+438r6cthiiflJQUqXElqCp17oIXp7LO8VXyd0Rej6WbcydGth+CtamV0tGeWVWpcU0mNa7ayjwdUFRUVGoY/+bNm+V6oJCXlxdJSUnk5OSQl5dHXFwc3bp1K1nv7OxMRkYG6enpAMTHx+Pm9t/nnx89ehQPD48nejNCCN1orW7BAv9pDG7dh18uHyJ8+0fsu3hQHi4mRDVX5kjA6NGjGThwIF27dkWlUpGYmMjEiRPLPLCDgwPh4eGMHDmSgoIChgwZgkajYdy4cYSGhuLm5sacOXMICwtDq9ViZ2fH7NmzS/a/cuUKjo6Oz/buhBAVxsTQmBC3/ng1dOer5LUsObCSvZcOMM5jOGpLO6XjCSGegkpbjlb+zJkz/PrrrxgaGuLp6UmLFi0qI9tTkaEn3ZMaV46qXOfi4mLiLuxl3fEotFotwW6B9GnhU+1uJ6zKNa4ppMZVW5mnAzIzM/n+++8ZPXo0Xbp0YdGiRWRnZ1dGNiFEFWVgYEDvFi/waZ/puDq4sProj0zdOZ+U6yco1hYrHU8IUU5lNgGTJk2iadOmwH/vDpgyZYrOgwkhqr66FrZM8n6DsM5juffoAfP2LeW92I9J+C2JwqJCpeMJIcpQZhPwZ3cHyEiAEOI/VCoVXo3c+bzvTEI9X8HQwJClB1fz/7ZOI/pMHA8f5ykdUQjxF8q8MPA/dwc4ODgA5b87QAihX4wMDPF27kiXRh04nnma6DNxfHdsMz+e2k6vZt0IaOmDrbmN0jGFEP/jie4OAEhKSirX3QFCCP2kUqlo69iato6tSc+5RPSZn4k5+zNb0+Lp5tyJwFa+NLB2UjqmEIJyNAFDhgyhTZs2JXcHNGrUiNWrV8t8/kKIMjW1dSbMayzDHmTz09l4dv+WyO7fEvGop6F/Kz9a2Zf9HBIhhO6U61HCTk5OPH78mLVr1/Lw4UNefvllXecSQtQgDlb2vOoewlDXvsSe38OOcwlM37WQlnZN6d+qFx71NRioyrxESQhRwf62CUhPT+df//oX0dHR1K9fn/z8fHbt2kWtWrUqK58QogaxNqvFi236MaCVH7t/S+SnsztZ+MtX1KvlQKCLL10bd8LE0FjpmELojb9svV977TVeeukljI2NWb16NT/99BOWlpbSAAghnpmpkQm9W7zA4oCPCOv8KqaGJnyVvJa3fppG1Okd5D5+qHREIfTCX44EnDp1CldXV1q0aIGzszNAqacACiHEszI0MMSrkQedG7pzMuss0WfiWHc8ik2ntuPb1JsAlx7UtbBVOqYQNdZfNgEJCQnExcWxfv16IiIieOGFF3j06FFlZhNC6AmVSoWbQyvcHFpx8fYVos/8zLZzu9l+bjddnDvQ36UXjWzqKx1TiBrnL08HGBkZERAQwJo1a9i0aRNqtZpHjx7h5+fH+vXrKzOjEEKPNK7TkNDOY/i870z8mnfnwJUjvLfjY+bs/SenstJknhIhKlC5Lsdt3rw506ZNY+/evbz66qtERkbqOpcQQs+pLe145fkXWRoYQXCbQC7kXOTD3YuYunM+v145THGxPKNAiGdVrlsE/8Pc3Jzg4GCCg4N1lUcIIUqpZWpFkGsAgS6+JFz8lZizO/k08Wscrezp5+LLC409MTEyUTqmENXSEzUBQgihFBMjE/yad8O3qTcHrx1ly+k4vklZT+TJGPq08MG/eXesTC2VjilEtSJNgBCiWjEwMMCz4fN0atCeU9nniD4Tx4aTMUSdiaNnEy/6uvTE3tJO6ZhCVAvSBAghqiWVSoWruiWu6pZcunOVmDM72XF+D7Hn9+DVyIP+Lr1oXKeB0jGFqNKkCRBCVHvONg14y3M0IZr+bDu7i53p+9l/6SBtHZ+jfys/2qhdZJ4TIf6ENAFCiBqjroUtI9sPYbBrH34+v49t53YzK2ExTeo0ZEArPzo1aI+hgaHSMYWoMqQJEELUOFYmlgxq3Zu+Lj3Ze/EAMWd/5rOkFagt7ejn4otPEy9M5Y4CIaQJEELUXCaGxvg286ZHEy+Srx9ny5k4vj28gY0nf8K/xQs4FdVROqIQitJpExATE8OyZcsoLCxk1KhRjBgxotT61NRUpk+fTkFBAU5OTixYsABra2uysrKYNm0aWVlZmJmZsXDhQho0kAt8hBBPx8DAgI4N2tGhflvO3rxA1Jk4fkjdionKmAyL2/Rz8cXc2EzpmEJUOp09wDszM5NFixaxbt06oqKi2LBhA+fPny+1TUREBKGhoURHR9OkSRNWrFgBwMSJE/Hx8SEqKooBAwawcOFCXcUUQugRlUpFK/vmTO76Jp/0/oDGFvXZmLqVt7Z+wLa0XRQUFSgdUYhKpbMmIDExEU9PT2xsbLCwsMDf35/Y2NhS2xQXF5ObmwtAXl4eZmZm5OTkcObMGUJCQgAICgoiLCxMVzGFEHqqYe16DHLyZbbvJBrVrseqIxv5x7YPSfgtSaYkFnpDZ01AVlYW9vb2JctqtZrMzMxS20yePJlp06bh7e1NYmIiISEhXLlyhXr16jF37lyCgoIIDQ3F2NhYVzGFEHquuV1jpr8QxrTuoVibWrH04Gre2/Exh64dk4cViRpPZ9cEFBcXl7ovV6vVllrOz89n6tSprFq1Co1Gw8qVK5k0aRLjx4/n1KlTvP3227z//vts3LiRyZMns2bNmnK/dkpKSoW+F/FHUuPKIXXWvf+t8RDbXpw1/Y29t5JZsP9L6pmq6V63A43MnRRMWP3J51j33N3dn2o/nTUBjo6OJCcnlyxnZ2ejVqtLltPS0jA1NUWj0QAQHBzM4sWLmTZtGpaWlvj4+ADQr18/Pv744yd67acthiiflJQUqXElkDrr3p/V2AMPgosHk/BbEhtTf2L9ta20c2zNMM1AmtRpqFDS6ks+x1Wbzk4HeHl5kZSURE5ODnl5ecTFxdGtW7eS9c7OzmRkZJCeng5AfHw8bm5uNGrUCEdHR/bs2QPA7t27cXV11VVMIYT4AyMDQ3ybebMkYCYvtR3EuZyLTIqbzWdJK8i4n6V0PCEqjM5GAhwcHAgPD2fkyJEUFBQwZMgQNBoN48aNIzQ0FDc3N+bMmUNYWBharRY7Oztmz54NwJIlS5gxYwYLFizAysqKuXPn6iqmEEL8JRMjE/q38qNnU2+iz/zMtrRdHLhymB5NuzDEtS91zGsrHVGIZ6LS1rArX2ToSfekxpVD6qx7T1rj23l3+fHUNuIv7MfQwJCAlj0Y0MoPSxMLHaas3uRzXLXJjIFCCFFOdcxrM9Z9GP1cfIk8EUPU6R38fGEfA1v507vFCzIVsah2dHZNgBBC1FSOVvaEdh7DfL8ptLRrytrjmwndNp2dF/ZRWFykdDwhyk2aACGEeEqN6zTk/W7/jw993kFtYcfy5HW8u30miZdTKNbKhEOi6pMmQAghnlFrdQtm9nyPid5vYGRoxGdJ3/D+z3M5lnFKJhwSVZpcEyCEEBVApVLhUV/D805t2H/5EBtORBOxZwmu6pYM1wykhV0TpSMK8QfSBAghRAUyMDCgW+NOdG74PDsv7OfHU9uYunM+Heu3I0TTnwbWMvugqDqkCRBCCB0wNjSmT0sfXmjSma1pu4g58zOHYo/RvbEnL7r2o66lrdIRhZAmQAghdMnc2IwhrgH4Ne9G1KlYYs/vYf+lQ/g3786g1r2xNrVSOqLQY9IECCFEJbA2tWJk+yEEtOxBZOpPbDu3i13pvxDYype+LXtibmymdEShh+TuACGEqER1LW15s+NIPvH/ADeHVkSe/Im3t37AtrRdFBQVKB1P6BkZCRBCCAU0qO3Ee97jOXfrN9Ydj2LVkY1sTdtFcJtAvBt1wMBAfkcTuiefMiGEUFALuyZMfyGMqd3fxsrEgi8OrGJCXATJ147JHANC52QkQAghFKZSqWjr2Bo3h1b8euUIG05EM3//l7S0a8pwzUBaq1soHVHUUNIECCFEFWGgMsCrkTsdG7Qj4bdENqZu5cPdn9LeyZVhbgNpXKeB0hFFDSNNgBBCVDFGBob4NutKV+dOxJ5LIOp0LBPjIvBu1IHhmoEyx4CoMNIECCFEFWVqZMKA5/zo2awL0Wd+ZlvaLg5dP84wt/70bv6CXDwonpl8goQQooqzMrFkuGYgn/aZwXN1m7HqyEamxS/g8p1rSkcT1Zw0AUIIUU2oLe14v9tbhHq+QmbuTSbFzeb7E1t4LPMLiKckpwOEEKIaUalUeDt3ROPYmtVHf2DTqViSrhxmvMcIWqtbKh1PVDMyEiCEENWQtakVb3UazbTuoRQVF/Hh7kV8eeg7HjzOVTqaqEakCRBCiGpM4/gcn/SeTv9Wvdj9WyLvbJ/Jr1cOy0RDolx02gTExMQQEBCAn58fa9eu/cP61NRUgoKC6N+/P+PHj+fevXsAbN68GW9vbwYMGMCAAQNYtGiRLmMKIUS1ZmpkwkttBzPHdzJ1zGrzaeLXLNj/Jbce3lY6mqjidNYEZGZmsmjRItatW0dUVBQbNmzg/PnzpbaJiIggNDSU6OhomjRpwooVKwA4efIkkydPZsuWLWzZsoXw8HBdxRRCiBqjqW0jZveaxEttB3M88zTvbJ9J7LkEirXFSkcTVZTOmoDExEQ8PT2xsbHBwsICf39/YmNjS21TXFxMbu7v56/y8vIwM/v9UZonTpxg8+bNBAYG8t5773H37l1dxRRCiBrF0MCQ/q168UnvD2hu15hvD29gRvwnXL17Q+loogrSWROQlZWFvb19ybJarSYzM7PUNpMnT2batGl4e3uTmJhISEgIAPb29rz55ptER0fj5OTEzJkzdRVTCCFqJAcre6Z1D+X/dRzFtfuZTIiLIPJkjDyuWJSi0uro6pFly5bx6NEjwsLCAIiMjOTkyZMlX+j5+fkEBQUxZ84cNBoNK1euJCkpieXLl5c6zt27d+nVqxcHDx4s1+umpKRU6PsQQojq7mFRHvHZv3LqwQVsjWvTR92VBuaOSscSFcjd3f2p9tPZPAGOjo4kJyeXLGdnZ6NWq0uW09LSMDU1RaPRABAcHMzixYu5f/8+P/74I6NHjwZAq9ViaGj4RK/9tMUQ5ZOSkiI1rgRSZ93Tpxp3xZujN1L5Onkda6/9RK9mXRmhGYSFiblOX1efalwd6ex0gJeXF0lJSeTk5JCXl0dcXBzdunUrWe/s7ExGRgbp6ekAxMfH4+bmhoWFBd988w3Hjh0D4LvvvqNXr166iimEEHqjnZMrn/T+gL4te7IzfT/hsR9x8OpRpWMJBelsJMDBwYHw8HBGjhxJQUEBQ4YMQaPRMG7cOEJDQ3Fzc2POnDmEhYWh1Wqxs7Nj9uzZGBoa8tlnn/Hhhx+Sn59P48aNmT9/vq5iCiGEXjEzNmNU+yF0aeTBV8lrWfjLV3Rs0I4xzwdja26jdDxRyXR2TYBSZOhJ96TGlUPqrHv6XuPC4iJ+OruTjalbMTYwYoRmED2bdcFAVXGDxPpe46pOZgwUQgg9ZWRgyMDn/PnEfxpN6jTk65R1fLR7EdfuZSgdTVQSaQKEEELPOdZSM/2FMN7o8DKX715nwo4IfkjdRmFRodLRhI7JUwSFEEKgUqnwaepF+3ptWHU4ksiTMSRdTmZ8h5doWbep0vGEjshIgBBCiBI2ZtaEeY1lctc3eViYzwfxC/k2ZQN5BflKRxM6ICMBQggh/uD5em58at+C709EE3sugUPXjvGqewge9TVKRxMVSEYChBBC/ClzYzNeef5FZvV8DwsTc+bvX8aniV9zJ0+e51JTSBMghBDib7Ws25R5vd4nxK0/KdeOE779I3al/0INu8NcL0kTIIQQokxGhkYMbt2HBf5TaWTTgC8PfcfMhM+4cT9L6WjiGUgTIIQQotzqWTsywyeM1zxG8NvtK7wXO4vNp2IpLC5SOpp4CnJhoBBCiCdioDLAt5k37vXcWHk4kvUntpD479sJm9s1VjqeeAIyEiCEEOKp1DGvzTtdxjHB+3XuP85lavx8Vh2OJF9uJ6w2ZCRACCHEM+lQvy2u6pasOx7F9nMJHLx2jHEew2jv1EbpaKIMMhIghBDimVkYmzPWfRgze76LqZEJc/b+k8VJK8gtzFM6mvgbMhIghBCiwrjUbcZ8vylEnd7B5tM7OKg9yoGCk7R3cqWdoyt1LW2Vjij+hzQBQgghKpSxoTFD2/SjcyN3/vVLJOm3L3Po2jEAGlg70c7JlXaOrXnOvjnGhsYKp9Vv0gQIIYTQiQbWTvRWe/P8889z7V4GRzNSOXIjldhzCfx0diemhia4OrjQ3tGV9k6uqK3qKh1Z70gTIIQQQqdUKhUNajvRoLYT/Vx8yS98RGpWGkdvpHL0RiqHr58AwKmWmvaOrrRzcqW1fQtMjEwUTl7zSRMghBCiUpkZmeJezw33em5otVoyHmRz5MZJjt5I5ef0/Ww7txtjQ2Nc7Vv8furAyRUnKzUqlUrp6DWONAFCCCEUo1KpcKqlxqlWDwJa9uBx4WNOZZ/j6I1UjmSksurIRjiyEQfLuiUNgau6JWZGpkpHrxGkCRBCCFFlmBiZlHzZjwYyH2Rz9MYpjmakkvBbEjvO78HIwIjn7JuX3HFQ39pRRgmekjQBQgghqiwHK3v8W3THv0V3CooKOJ19nqMZpzh6I5XVR39kNT9S18KWdo6taefkShsHFyyMzZWOXW3otAmIiYlh2bJlFBYWMmrUKEaMGFFqfWpqKtOnT6egoAAnJycWLFiAtbV1yfpTp07x4osvcvLkSV3GFEIIUQ0YGxqjcXwOjeNzjGwXxM3cHI5mpHL0xil+uZzMzvT9GKoMaGXfnHaOrrRzak2j2vVllOBv6KwJyMzMZNGiRWzatAkTExNCQkLo1KkTzZs3L9kmIiKC0NBQunfvzty5c1mxYgXh4eEA5OXlMWvWLAoKCnQVUQghRDVW19IW32Zd8W3WlcKiQtJupXPkRipHM06x9vhm1h7fTB3z2rT79y2Ibg6tsDSxUDp2laKzJiAxMRFPT09sbGwA8Pf3JzY2lrfeeqtkm+LiYnJzc4Hfv/Rr165dsm7u3LmMGjWKw4cP6yqiEEKIGsLI0IjW6pa0VrdkRNtB5OTd4diNUxzJSOXg1SPs/i0RA5UBLe2a/HuyIlca12mAgUq/Z8/XWROQlZWFvb19ybJareb48eOltpk8eTJjxoxh9uzZmJubExkZCUB8fDz5+fn07t1bV/GEEELUYLbmNvg09cKnqRdFxUWcu3WRoxknOXrjFN+fiOb7E9HUNrOmreNztHdyRePwHLVMrZSOXel01gQUFxeXOg+j1WpLLefn5zN16lRWrVqFRqNh5cqVTJo0iYiICJYtW8aqVaue+rVTUlKeJbooB6lx5ZA6657UWPeqSo1b0IAWdg3Irf2Q3x5eI/3hVQ5dPsreiwdQocLJ1J4mlg1oa+1CLSNLpeM+EXd396faT2dNgKOjI8nJySXL2dnZqNXqkuW0tDRMTU3RaDQABAcHs3jxYhISErhz506piwgHDBjA2rVrsbIqX5f2tMUQ5ZOSkiI1rgRSZ92TGuteVa1xt3//u7i4mAu3L5XMXpiYc4RattaMcQ9WNF9l0VkT4OXlxZIlS8jJycHc3Jy4uDhmzZpVst7Z2ZmMjAzS09Np2rQp8fHxuLm5MXToUIYOHVqynYuLC1u2bNFVTCGEEHrMwMCAFnZNaGHXhKFt+pH7+CHmRmZKx6o0OmsCHBwcCA8PZ+TIkRQUFDBkyBA0Gg3jxo0jNDQUNzc35syZQ1hYGFqtFjs7O2bPnq2rOEIIIUSZ9O3uAZ3OExAYGEhgYGCpn3399dclf+7evTvdu3f/22OcPXtWJ9mEEEIIfaff90YIIYQQekyaACGEEEJPSRMghBBC6ClpAoQQQgg9JU2AEEIIoaekCRBCCCH0lEqr1WqVDiGEEEKIyicjAUIIIYSekiZACCGE0FPSBAghhBB6SpoAIYQQQk9JEyCEEELoKWkChBBCCD0lTYAQQgihp6QJEEIIIfSUNAFCCCGEnqq2TUBMTAwBAQH4+fmxdu3aP6w/ffo0gwcPxt/fn6lTp1JYWKhAyuqtrBrv3LmTAQMG0L9/f958803u3r2rQMrqr6w6/0dCQgI9evSoxGQ1R1k1Tk9P5+WXX6Z///68+uqr8ll+CmXVODU1laCgIPr378/48eO5d++eAimrvwcPHtCvXz+uXr36h3VP9b2nrYYyMjK0Pj4+2tu3b2tzc3O1gYGB2nPnzpXapm/fvtojR45otVqt9v3339euXbtWgaTVV1k1vn//vrZLly7ajIwMrVar1X722WfaWbNmKRW32irPZ1mr1Wqzs7O1vXv31vr4+CiQsnorq8bFxcVaPz8/7Z49e7RarVa7YMEC7fz585WKWy2V53M8bNgwbUJCglar1WrnzJmj/fTTT5WIWq0dPXpU269fP62rq6v2ypUrf1j/NN971XIkIDExEU9PT2xsbLCwsMDf35/Y2NiS9deuXSM/P5927doBMHjw4FLrRdnKqnFBQQEzZszAwcEBABcXF27cuKFU3GqrrDr/x7Rp03jrrbcUSFj9lVXj1NRULCws6NatGwCvv/46I0aMUCputVSez3FxcTG5ubkA5OXlYWZmpkTUai0yMpIZM2agVqv/sO5pv/eqZROQlZWFvb19ybJarSYzM/Mv19vb25daL8pWVo3r1KlDr169AMjPz2f58uX4+vpWes7qrqw6A6xevZrWrVvTtm3byo5XI5RV48uXL1O3bl2mTJnCoEGDmDFjBhYWFkpErbbK8zmePHky06ZNw9vbm8TEREJCQio7ZrUXERGBh4fHn6572u+9atkEFBcXo1KpSpa1Wm2p5bLWi7KVt4b379/ntddeo1WrVgwaNKgyI9YIZdU5LS2NuLg43nzzTSXi1Qhl1biwsJCDBw8ybNgwNm/eTMOGDZk7d64SUautsmqcn5/P1KlTWbVqFfv372f48OFMmjRJiag11tN+71XLJsDR0ZHs7OyS5ezs7FLDI/93/c2bN/90+ET8tbJqDL93nsOHD8fFxYWIiIjKjlgjlFXn2NhYsrOzCQoK4rXXXiupuSi/smpsb2+Ps7Mzbm5uAPTr14/jx49Xes7qrKwap6WlYWpqikajASA4OJiDBw9Wes6a7Gm/96plE+Dl5UVSUhI5OTnk5eURFxdXcj4PoH79+piampKSkgLAli1bSq0XZSurxkVFRbz++uv06dOHqVOnykjLUyqrzqGhoezYsYMtW7awfPly1Go169atUzBx9VNWjdu3b09OTg5nzpwBYNeuXbi6uioVt1oqq8bOzs5kZGSQnp4OQHx8fEnTJSrGU3/vVdhli5UsOjpa27dvX62fn592+fLlWq1Wqx07dqz2+PHjWq1Wqz19+rQ2KChI6+/vr33nnXe0jx49UjJutfR3NY6Li9O6uLho+/fvX/LPlClTFE5cPZX1Wf6PK1euyN0BT6msGh89elQbFBSkDQgI0I4ZM0Z78+ZNJeNWS2XVOCEhQRsYGKjt16+fdtSoUdrLly8rGbda8/HxKbk74Fm/91RarVar4wZFCCGEEFVQtTwdIIQQQohnJ02AEEIIoaekCRBCCCH0lDQBQgghhJ6SJkAIIYTQU9IECFFDFRQU4O3tzdixY0t+duDAAfr161fmvi4uLuTk5Ogy3h+8/PLL8owPISqZNAFC1FA///wzrVq14uTJk1y4cEHpOEKIKkiaACFqqPXr19OzZ08CAgL417/+9Yf1kydPZsaMGQQHB+Pr68uMGTMoKCgoWb9kyRIGDx5Mjx49Sp4P//DhQyZOnEhwcDD+/v4MHjy4ZBa4/xUSEsKOHTtKlhcsWMCCBQvKtf/Vq1dp3779Xy5v3LiRwYMHM3DgQEaPHi0NjhDPQJoAIWqg8+fPc+TIEXr37s3AgQPZsmULt2/f/sN2x48f59tvv2Xbtm1cuHCBDRs2lKxr2LAhmzZt4osvvmDu3LkUFBSwd+9erK2t2bBhAzt27KBNmzYlDcL/Gjp0KJs2bQJ+n2I6OjqaoUOHlnv/v3Lw4EGioqJYu3YtUVFRjB07Vh6xLMQzMFI6gBCi4q1fvx4fHx/q1KlDnTp1aNCgAZGRkSXPGv+PQYMGYWlpCcCAAQOIj4/npZdeAii5duC5557j8ePHPHjwgN69e9OwYUPWrFnDpUuXOHjwYKnf0v8jICCA+fPnk52dzalTp2jcuHHJP+XZ/68kJCRw6dKlUo+hvXfvHnfu3MHGxuYJqySEkCZAiBrm4cOHbNmyBRMTE3r06AHAgwcP+O6772jTpk2pbQ0NDUv+rNVqMTD47+CgkdHvfz385+FQWq2WdevWERkZyYgRIwgMDMTGxoarV6/+IYO5uTn+/v789NNPHDlyhKFDhwKUa3+VSsX/zmb+v6coiouLGTBgABMmTChZzsrKonbt2k9eKCGEnA4QoqaJiYnBxsaGffv2sWvXLnbt2sXOnTt5+PDhH6743759O48fP+bRo0ds3rwZHx+fvz32/v37GTRoEEOHDqVJkybs2rWLoqKiP932xRdfZPPmzRw+fBh/f/9y729tbU1BQQHnz58HYOvWrSXrvL292bp1K1lZWcDvIx6jRo16sgIJIUrISIAQNcz69et55ZVXSv2Wb21tzcsvv8yqVatKbWtmZsbw4cO5d+8e/v7+BAUF/e2xx4wZw/Tp0/nhhx8AaNeuHWlpaX+6bZs2bTA0NKR3796YmpqWe/9atWoxYcIExo0bh62tLb179y5Z5+3tzbhx4xgzZgwqlQorKyu++OILeZS1EE9JniIohJ6aPHkyLVq04NVXX1U6ihBCIXI6QAghhNBTMhIghBBC6CkZCRBCCCH0lDQBQgghhJ6SJkAIIYTQU9IECCGEEHpKmgAhhBBCT0kTIIQQQuip/w/bNV6usrfY0AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "\n",
    "# Initialize the matplotlib figure\n",
    "f, ax = plt.subplots(figsize=(8, 4))\n",
    "\n",
    "# Plot the scores for each alpha\n",
    "sns.lineplot(data=scores, color=\"g\")\n",
    "\n",
    "# Add a legend and informative axis label\n",
    "ax.set(xlim=(0, 1), ylabel=\"Accuracy\",\n",
    "       xlabel=\"Alpha value\")\n",
    "sns.despine(left=True, bottom=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting alpha test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-8.526322044808872"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb_classifier.feature_log_prob_[1][1]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alpha testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hhrmVil6PTCU",
    "outputId": "5b193add-3a54-4294-9914-ab47f43dd24f",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha:  0.0\n",
      "Score:  0.8853235139400316\n",
      "\n",
      "Alpha:  0.1\n",
      "Score:  0.9053129931614939\n",
      "\n",
      "Alpha:  0.2\n",
      "Score:  0.8926880589163598\n",
      "\n",
      "Alpha:  0.30000000000000004\n",
      "Score:  0.8837453971593898\n",
      "\n",
      "Alpha:  0.4\n",
      "Score:  0.8774329300368228\n",
      "\n",
      "Alpha:  0.5\n",
      "Score:  0.8679642293529721\n",
      "\n",
      "Alpha:  0.6000000000000001\n",
      "Score:  0.8611257233035244\n",
      "\n",
      "Alpha:  0.7000000000000001\n",
      "Score:  0.8532351394003156\n",
      "\n",
      "Alpha:  0.8\n",
      "Score:  0.8437664387164651\n",
      "\n",
      "Alpha:  0.9\n",
      "Score:  0.8395581273014203\n",
      "\n"
     ]
    }
   ],
   "source": [
    "###Extract features to use in making prediction\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn import metrics\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "# Create the list of alphas: alphas\n",
    "alphas = np.arange(0,1,.10)\n",
    "scores ={}\n",
    "# Define train_and_predict()\n",
    "def train_and_predict(alpha):\n",
    "    # Instantiate the classifier: nb_classifier\n",
    "    nb_classifier = MultinomialNB(alpha=alpha)\n",
    "    # Fit to the training data\n",
    "    nb_classifier.fit(tfidf_train, y_train)\n",
    "    # Predict the labels: pred\n",
    "    pred = nb_classifier.predict(tfidf_test)\n",
    "    # Compute accuracy: score\n",
    "    score = metrics.accuracy_score(y_test,pred)\n",
    "    scores[alpha] = score\n",
    "    return score\n",
    "\n",
    "# Iterate over the alphas and print the corresponding score\n",
    "for alpha in alphas:\n",
    "    print('Alpha: ', alpha)\n",
    "    print('Score: ', train_and_predict(alpha))\n",
    "    print()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "NLP Fake News Predictor.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
